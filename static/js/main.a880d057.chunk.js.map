{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["RANDOM_PLAINTEXT","UPPERCASE_LETTERS","LOWERCASE_LETTERS","ENGLISH_FREQ","theme","global","colors","brand","font","family","size","height","KeyDisplay","props","fillVals","Array","fill","i","keyVal","char","toUpperCase","charCodeAt","key","decrypt","push","renderCol","onClick","parseInt","focused","Box","direction","border","alignContent","justify","Text","renderUIBox","text","focusIndicator","align","background","renderDisplayBox","plaintext","cyphertext","ResultTable","body","TableRow","TableCell","scope","pattern","RadioButton","onChange","checked","selectedButton","chisquare","freq","conflict","Table","TableHeader","chisquareClick","frequencyClick","TableBody","HomeGrid","Grid","areas","name","start","end","columns","rows","gap","margin","gridArea","TextArea","handleEditMessage","value","displayMessage","placeholder","resize","spellCheck","focus","handleSelectMessage","handleKeyDisplay","focusedBox","RadioButtonGroup","options","handleChangeMode","modeValue","Button","label","handleBreak","handleRandomPT","handleRandomCT","BreakGrid","TextInput","handleEditSearch","searchQuery","handleGo","CheckBox","handleToggleConflict","textAlign","resultFrom","resultTo","resultTotal","icon","Previous","handlePositionPrevious","Next","handlePositionNext","reverse","handleSearchBack","handleSelectSearch","resultPattern","resultChisquare","resultFreq","resultConflict","encrypt","message","output","length","idx","charAt","swapChar","from","to","formatKey","formatedKey","getFreq","toNGram","n","App","document","addEventListener","event","onKeyPress","state","home","searchSelection","displayKey","activeIdx","cyphertextFreq","queryResults","page","hideConflict","queryResultsHideConflict","shouldHide","this","updateResultDisplay","setState","val","sortChisquare","sort","compareChisquare","compareFreq","noConflict","conflicts","results","updateSearchSelection","fromText","pageResults","slice","map","a","toFixed","processSearchQuery","updateMessage","String","fromCharCode","newKey","updateKey","tempMessage","processMessage","keyToDecrypt","keyToEncrypt","cyphertextTotal","keyFromDecryptToEncrypt","updateMode","toLowerCase","clearResults","updateCypertext","setHome","updateSearchQuery","alert","updateActiveIdx","target","clearFocus","which","codeNotInKey","updateKeyVal","code","newMessage","Math","floor","random","j","shuffle","includes","updateHideConflict","updateQueryResults","b","queryTotal","done","matches","Map","substring","match","has","get","cyphertextChar","plaintextChar","divisor","pow","set","width","alignSelf","Grommet","full","Main","renderPage","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a880d057.chunk.js","sourcesContent":["import React from 'react';\nimport { \n  Box, \n  Button,\n  Grid,\n  Grommet,\n  Main,\n  Text,\n  TextArea,\n  TextInput,\n  RadioButtonGroup,\n  CheckBox,\n  Table,\n  TableHeader,\n  TableRow,\n  TableCell,\n  TableBody,\n  RadioButton,\n} from 'grommet';\nimport {\n  Previous,\n  Next,\n} from 'grommet-icons'\n\nconstn                          'THEMOSTNOTICEABLEEFFECTTHISCOMMUNICATIONHASONTHEGAMEISTHEDELAYINMOVINGSUPPOSEAPLAYERTYPESAMOVEFORHISSHIPANDHITSRETURNWHATHAPPENSTHENTHEPLAYERPROCESSSAVESUPMESSAGESTOBEWRITTENTOTHETEMPORARYFILEINABUFFEREVERYSEVENSECONDSORSOTHEPLAYERPROCESSGETSEXCLUSIVEACCESSTOTHETEMPORARYFILEANDWRITESOUTITSBUFFERTOTHEFILETHEDRIVERRUNNINGASYNCHRONOUSLYMUSTREADINTHEMOVEMENTCOMMANDPROCESSITANDWRITEOUTTHERESULTSTHISTAKESTWOEXCLUSIVEACCESSESTOTHETEMPORARYFILEFINALLYWHENTHEPLAYERPROCESSGETSAROUNDTODOINGANOTHERSEVENSECONDUPDATETHERESULTSOFTHEMOVEAREDISPLAYEDONTHESCREENHENCEEVERYMOVEMENTREQUIRESFOUREXCLUSIVEACCESSESTOTHETEMPORARYFILEANYWHEREFROMSEVENTOTWENTYONESECONDSDEPENDINGUPONASYNCHRONYBEFORETHEPLAYERSEESTHERESULTSOFHISMOVESAFTERTHEPLAYERWRITESOUTAFIRSTMOVEMENTMESSAGEASECONDMOVEMENTCOMMANDCANTHENBEISSUEDTHEFIRSTMESSAGEWILLBEINTHETEMPORARYFILEWAITINGFORTHEDRIVERANDTHESECONDWILLBEINTHEFILEBUFFERWAITINGTOBEWRITTENTOTHEFILETHUSBYALWAYSTYPINGMOVESATURNAHEADOFTHETIMETHEPLAYERCANSAILAROUNDQUITEQUICKLY',\n                          'IFYOUHAVENEVERPLAYEDSOLITAIREBEFOREITISRECOMMENDEDTHATYOUCONSULTASOLITAIREINSTRUCTIONBOOKINCANFIELDTABLEAUCARDSMAYBEBUILTONEACHOTHERDOWNWARDINALTERNATECOLORSANENTIREPILEMUSTBEMOVEDASAUNITINBUILDINGTOPCARDSOFTHEPILESAREAVAILABLETOBEPLAYEDONFOUNDATIONSBUTNEVERINTOEMPTYSPACESSPACESMUSTBEFILLEDFROMTHESTOCKTHETOPCARDOFTHESTOCKALSOISAVAILABLETOBEPLAYEDONFOUNDATIONSORBUILTONTABLEAUPILESAFTERTHESTOCKISEXHAUSTEDTABLEAUSPACESMAYBEFILLEDFROMTHETALONANDTHEPLAYERMAYKEEPTHEMOPENUNTILHEWISHESTOUSETHEMCARDSAREDEALTFROMTHEHANDTOTHETALONBYTHREESANDTHISREPEATSUNTILTHEREARENOMORECARDSINTHEHANDORTHEPLAYERQUITSTOHAVECARDSDEALTONTOTHETALONTHEPLAYERTYPESHTFORHISMOVEFOUNDATIONBASECARDSAREALSOAUTOMATICALLYMOVEDTOTHEFOUNDATIONWHENTHEYBECOMEAVAILABLE',\n                          'ROBOTSPITSYOUAGAINSTEVILROBOTSWHOARETRYINGTOKILLYOUWHICHISWHYTHEYAREEVILFORTUNATELYFORYOUEVENTHOUGHTHEYAREEVILTHEYARENOTVERYBRIGHTANDHAVEAHABITOFBUMPINGINTOEACHOTHERTHUSDESTROYINGTHEMSELVESINORDERTOSURVIVEYOUMUSTGETTHEMTOKILLEACHOTHEROFFSINCEYOUHAVENOOFFENSIVEWEAPONRYSINCEYOUARESTUCKWITHOUTOFFENSIVEWEAPONRYYOUAREENDOWEDWITHONEPIECEOFDEFENSIVEWEAPONRYATELEPORTATIONDEVICEWHENTWOROBOTSRUNINTOEACHOTHERORAJUNKPILETHEYDIEIFAROBOTRUNSINTOYOUYOUDIEWHENAROBOTDIESYOUGETTENPOINTSANDWHENALLTHEROBOTSDIEYOUSTARTONTHENEXTFIELDTHISKEEPSUPUNTILTHEYFINALLYGETYOUONLYFIVESCORESAREALLOWEDPERUSERONTHESCOREFILEIFYOUMAKEITINTOTHESCOREFILEYOUWILLBESHOWNTHELISTATTHEENDOFTHEGAMEIFANALTERNATESCOREFILEISSPECIFIEDTHATWILLBEUSEDINSTEADOFTHESTANDARDFILEFORSCORESY',\n                          'ATTHESTARTOFTHEFIRSTGAMETHEPROGRAMASKSTHEPLAYERTOCUTTHEDECKTODETERMINEWHOGETSTHEFIRSTCRIBTHEUSERSHOULDRESPONDWITHANUMBERBETWEENZEROANDFIFTYONEINDICATINGHOWMANYCARDSDOWNTHEDECKISTOBECUTTHEPLAYERWHOCUTSTHELOWERRANKEDCARDGETSTHEFIRSTCRIBIFMORETHANONEGAMEISPLAYEDTHELOSEROFTHEPREVIOUSGAMEGETSTHEFIRSTCRIBINTHECURRENTGAMEFOREACHHANDTHEPROGRAMFIRSTPRINTSTHEPLAYERSHANDWHOSECRIBITISANDTHENASKSTHEPLAYERTODISCARDTWOCARDSINTOTHECRIBTHECARDSAREPROMPTEDFORONEPERLINEANDARETYPEDASEXPLAINEDBELOWAFTERCUTTINGTHEDECKPLAYSTARTSWITHTHENONDEALERTHEPERSONWHODOESNTHAVETHECRIBLEADINGTHEFIRSTCARDPLAYCONTINUESASPERCRIBBAGEUNTILALLCARDSAREEXHAUSTEDTHEPROGRAMKEEPSTRACKOFTHESCORINGOFALLPOINTSANDTHETOTALOFTHECARDSONTHETABLEAFTERPLAYTHEHANDSARESCOREDTHEPROGRAMREQUESTSTHEPLAYERTOSCOREHISHANDANDTHECRIBIFITISHISBYPRINTINGOUTTHEAPPROPRIATECARDSANDTHECUTCARDENCLOSEDINBRACKETSPLAYCONTINUESUNTILONEPLAYERREACHESTHEGAMELIMITACARRIAGERETURNWHENANUMERICINPUTISEXPECTEDISEQUIVALENTTOTYPINGTHELOWESTLEGALVALUEWHENCUTTINGTHEDECKTHISISEQUIVALENTTOCHOOSINGTHETOPCARD'];\n\nconst UPPERCASE_LETTERS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\nconst LOWERCASE_LETTERS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n\nconst N_GRAM = 5;\n\nconst RESULTS_PER_PAGE = 10;\nconst RIGHT_ARROW_CODE = 39;\nconst LEFT_ARROW_CODE = 37;\nconst LOWERCASE_A_CODE = 97;\nconst LOWERCASE_Z_CODE = 122;\nconst DASH = '-';\nconst BACKSPACE_CODE = 8;\nconst DEL_CODE = 46;\nconst ENTER_CODE = 13;\nconst A_CODE = 65;\nconst Z_CODE = 90;\nconst SPACE = ' ';\nconst LEN_ALPHABET = 26;\nconst ENGLISH_FREQ = [73, 9, 30, 44, 130, 28, 16, 35, 74, 2, 3, 35, 25, 78, 74, 27, 3, 77, 63, 93, 27, 13, 16, 5, 19, 1];\n\nconst theme = {\n  global: {\n    colors: {\n      brand: '#228BE6',\n    },\n    font: {\n      family: 'Courier New',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\n/* ----------------------------------------------- */\n\nfunction KeyDisplay(props) {\n    let fillVals = Array(LEN_ALPHABET).fill(true);\n\n    for(let i = 0; i < LEN_ALPHABET; i++) {\n      if(props.keyVal[i] === DASH) {\n        continue;\n      }\n      let char = 0;\n      char = props.keyVal[i].toUpperCase().charCodeAt(0);\n      if(A_CODE <= char && char <= Z_CODE) {\n        fillVals[char-A_CODE] = false;\n      }\n    }\n    \n    let key = [];\n    for(let i =0; i < LEN_ALPHABET; i++){\n      if(props.decrypt) {\n          key.push(renderCol(i, props.keyVal[i], LOWERCASE_LETTERS[i], fillVals[i], props.decrypt, props.onClick, parseInt(props.focused) === i));\n      } else {\n          key.push(renderCol(i,UPPERCASE_LETTERS[i], props.keyVal[i], fillVals[i], props.decrypt, props.onClick, parseInt(props.focused) === i));\n      }\n    }\n    return(\n      <Box direction='row'>\n        {renderLabel()}\n        {key}\n      </Box>\n    );\n}\n\nfunction renderUIBox(i, text, onClick, focused) {\n  return (\n    <Box\n      onClick={()=>(onClick(i))}\n      focusIndicator={false}\n      border='true'\n      alignContent='center'\n      justify='center'\n      align='center'\n      background={focused ? 'accent-1' : ''}\n    >\n      <Text>{text}</Text>\n    </Box>\n\n  );\n}\n\nfunction renderDisplayBox(i, text, fill) {\n  return (\n    <Box\n      border='true'\n      alignContent='center'\n      justify='center'\n      align='center'\n      background={fill ? 'light-4': ''}\n    >\n      <Text>{text}</Text>\n    </Box>\n\n  );\n}\n\nfunction renderCol(i, plaintext, cyphertext, fill, decrypt, onClick, focused) {\n  if(decrypt) {\n    return(\n      <Box>\n        {renderUIBox(i, plaintext, onClick, focused)}\n        {renderDisplayBox(i, cyphertext, fill)}\n      </Box>\n    );\n  }\n  return(\n    <Box>\n      {renderDisplayBox(i, plaintext, fill)}\n      {renderUIBox(i, cyphertext, onClick, focused)}\n    </Box>\n  );\n}\n\nfunction renderLabel() {\n  return(\n    <Box>\n      <Box\n        border='true'\n        alignContent='center'\n        justify='center'\n      >\n        <Text>PLAINTEXT</Text>\n      </Box>\n      <Box\n        border='true'\n        alignContent='center'\n        justify='center'\n      >\n        <Text>cyphertext</Text>\n      </Box>\n    </Box>\n  )\n}\n\n/* ----------------------------------------------- */\n\nfunction ResultTable(props) {\n  let body = [];\n  for(let i = 0; i < RESULTS_PER_PAGE; i++) {\n    body.push(\n      <TableRow>\n        <TableCell scope='row'>\n          {props.pattern[i] \n            ? <RadioButton onChange={()=>props.onChange(i)} checked={i===parseInt(props.selectedButton)} />\n            : ''}\n        </TableCell>\n        <TableCell scope='row'>\n          {props.pattern[i]}\n        </TableCell>\n        <TableCell scope='row'>\n          {props.chisquare[i]}\n        </TableCell>\n        <TableCell scope='row'>\n          {props.freq[i]}\n        </TableCell>\n        <TableCell scope='row'>\n          {props.conflict[i]}\n        </TableCell>\n      </TableRow>\n    );\n  }\n\n  return(\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableCell scope='col' border='bottom'>\n          </TableCell>\n          <TableCell scope='col' border='bottom'>\n            Pattern\n          </TableCell>\n          <TableCell scope='col' border='bottom'>\n            <Box onClick={props.chisquareClick}>Chi Square</Box>\n          </TableCell>\n          <TableCell scope='col' border='bottom'>\n            <Box onClick={props.frequencyClick}>Frequency</Box>\n          </TableCell>\n          <TableCell scope='col' border='bottom'>\n            Confilicts\n          </TableCell>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {body}\n      </TableBody>\n    </Table>\n  );\n}\n\n/* ----------------------------------------------- */\nfunction HomeGrid(props) { \n  return (\n    <Grid\n      areas={[\n        { name: 'text', start: [0, 0], end: [4, 0] },\n        { name: 'key', start: [0, 1], end: [3, 1] },\n        { name: 'mode', start: [4, 1], end: [4, 1] },\n        { name: 'randPT', start: [0, 2], end: [1, 2] },\n        { name: 'randCT', start: [2, 2], end: [3, 2] },\n        { name: 'break', start: [4, 2], end: [4, 2] },\n      ]}\n      columns={['auto', 'auto', 'auto', 'auto']}\n      rows={['medium', 'xsmall', 'xxsmall']}\n      gap='small'\n      margin='xlarge'\n    >\n      <Box gridArea='text'> \n       <TextArea\n          onChange = {props.handleEditMessage}\n          value = {props.displayMessage}\n          placeholder=\"Type message here...\"\n          resize={false}\n          fill={true}\n          name='TextInput'\n          spellCheck='false'\n          focus={false}\n          onClick={props.handleSelectMessage}\n        />\n      </Box>\n      <Box gridArea='key' justify='center'>\n        <KeyDisplay \n          decrypt={props.decrypt}\n          keyVal={props.keyVal}\n          onClick={props.handleKeyDisplay}\n          focused={props.focusedBox}\n        />\n      </Box>\n      <Box gridArea='mode' justify='center'>\n        <RadioButtonGroup\n          options={['Decrypt','Encrypt']}\n          onChange={props.handleChangeMode}\n          value={props.modeValue}\n        />\n      </Box>\n      <Box gridArea='break'>\n        <Button\n          label='Break'\n          size='small'\n          onClick={props.handleBreak}\n        />\n      </Box>\n      <Box gridArea='randPT'>\n        <Button\n          label='Random Plaintext'\n          size='small'\n          onClick={props.handleRandomPT}\n        />\n      </Box>\n      <Box gridArea='randCT'>\n        <Button\n          label='Random Cyphertext'\n          size='small'\n          onClick={props.handleRandomCT}\n        />\n      </Box>\n    </Grid>\n  );\n}\n\n\nfunction BreakGrid(props) { \n  return (\n    <Grid\n      areas={[\n        { name: 'search', start: [0, 0], end: [1, 0] },\n        { name: 'go', start: [2, 0], end: [2, 0] },\n        { name: 'conflict', start: [3, 0], end: [3, 0] },\n        { name: 'searchInfo', start: [1, 2], end: [2, 2] },\n        { name: 'previous', start: [0, 2], end: [0, 2] },\n        { name: 'next', start: [3, 2], end: [3, 2] },\n        { name: 'ok', start: [3, 3], end: [3, 3] },\n        { name: 'results', start: [0, 1], end: [3, 1] },\n      ]}\n      columns={['auto', 'auto', 'auto', 'auto']}\n      rows={['xxsmall', 'medium', 'xxsmall', 'xxsmall']}\n      gap='small'\n      margin='xlarge'\n    >\n      <Box gridArea='search' alignContent='center' justify='center'> \n        <TextInput\n          onChange = {props.handleEditSearch}\n          value = {props.searchQuery}\n          placeholder='Search for word...'\n          spellCheck='false'\n          focus={false}\n        />\n      </Box>\n      <Box gridArea='go' alignContent='center' justify='center'>\n        <Button\n          label='Go'\n          onClick={props.handleGo}\n        />\n      </Box>\n      <Box gridArea='conflict'alignContent='center' justify='center'> \n        <CheckBox\n          onChange={props.handleToggleConflict}\n          label=\"Hide Conflicts\"\n        />\n      </Box>\n      <Box gridArea='searchInfo'> \n    <Text textAlign='center'>Showing {props.resultFrom} - {props.resultTo} </Text> \n    <Text textAlign='center'> (of {props.resultTotal}) </Text>\n      </Box>\n      <Box gridArea='previous'> \n        <Button\n          icon={<Previous size='small' />}\n          label='Prev'\n          onClick={props.handlePositionPrevious}\n        />\n      </Box>\n      <Box gridArea='next'> \n        <Button\n          icon={<Next size='small'/>}\n          label='Next'\n          onClick={props.handlePositionNext}\n          reverse={true}\n        />\n      </Box>\n      <Box gridArea='ok'>\n        <Button\n          label={props.searchQuery && props.selectedButton >= 0? 'Confirm' : 'Back'}\n          onClick={props.handleSearchBack}\n        />\n      </Box>\n      <Box gridArea='results'>\n        <ResultTable \n          onChange={props.handleSelectSearch}\n          selectedButton={props.selectedButton}\n          pattern={props.resultPattern}\n          chisquare={props.resultChisquare}\n          freq={props.resultFreq}\n          conflict={props.resultConflict}\n          frequencyClick={props.frequencyClick}\n          chisquareClick={props.chisquareClick}\n        />\n      </Box>\n    </Grid>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    document.addEventListener('keyup', (event) => this.onKeyPress(event))\n\n    this.state = {\n      home: true,\n      modeValue:'Decrypt',\n      decrypt:true,\n      searchSelection:-1,\n      message:'',\n      displayMessage:'',\n      key:Array(LEN_ALPHABET).fill(''),\n      displayKey:formatKey([]),\n      activeIdx:-1,\n      searchQuery:'',\n      cyphertext:'',\n      cyphertextFreq:[],\n      queryResults:[],\n      page:0,\n      resultPattern:[],\n      resultChisquare:[],\n      resultFreq:[],\n      resultConflict:[],\n      resultFrom:0,\n      resultTo:0,\n      resultTotal:0,\n      hideConflict:false,\n      queryResultsHideConflict:[],\n    };\n  }\n\n  /* -------------- Change State ------------------- */\n\n  updateHideConflict(shouldHide) {\n    this.updateResultDisplay(this.state.page, this.state.queryResults, shouldHide)\n    this.setState({\n      hideConflict:shouldHide\n    });\n  }\n\n  updateQueryResults(val, sortChisquare = true) {\n    if( sortChisquare ) {\n        val = val.sort(this.compareChisquare);\n    } else {\n        val = val.sort(this.compareFreq);\n    }\n    let noConflict = [];\n    for(let i = 0; i < val.length; i++) {\n      if(val[i].conflicts === 0) {\n        noConflict.push(val[i]);\n      }\n    }\n    if(this.state.hideConflict) {\n       this.updateResultDisplay(0, noConflict, false);\n    } else {\n        this.updateResultDisplay(0, val, false);\n    }\n    this.setState({\n      queryResults:val,\n      queryResultsHideConflict:noConflict,\n    });\n  }\n\n  updateResultDisplay(page, results = this.state.queryResults, hideConflict = this.state.hideConflict) {\n    if(hideConflict) {\n      results = this.state.queryResultsHideConflict;\n    }\n    this.updateSearchSelection(-1);\n    let from = page * RESULTS_PER_PAGE;\n    let fromText = from + 1;\n    let to = page * RESULTS_PER_PAGE + RESULTS_PER_PAGE;\n    if( to > results.length ) {\n      to = results.length;\n    }\n    if(results.length === 0) {\n      from = 0;\n      to = 0;\n      fromText=0;\n    }\n    let pageResults = results.slice(from, to);\n    this.setState({\n      page:page,\n      resultTo:to,\n      resultFrom:fromText,\n      resultTotal:results.length,\n      resultPattern:pageResults.map(a => a.pattern),\n      resultChisquare:pageResults.map(a => (a.chisquare).toFixed(3)),\n      resultConflict:pageResults.map(a => a.conflicts),\n      resultFreq:pageResults.map(a => a.freq),\n    });\n  }\n\n  updateSearchQuery(val) {\n    val = processSearchQuery(val);\n    this.setState({\n      searchQuery:val,\n    });\n  }\n\n  updateKeyVal(val, idx) {\n    //If removing key val\n    if(this.state.key[idx] && !val) {\n        if(this.state.decrypt) {\n            this.updateMessage(swapChar(this.state.key[idx], String.fromCharCode(idx+LOWERCASE_A_CODE), this.state.message));\n        } else {\n            this.updateMessage(swapChar(this.state.key[idx], String.fromCharCode(idx+A_CODE), this.state.message));\n        }\n    //adding a value  \n    } else if(val) {\n        if(this.state.decrypt) {\n            this.updateMessage(swapChar(String.fromCharCode(idx+LOWERCASE_A_CODE), val, this.state.message));\n        } else {\n            this.updateMessage(swapChar(String.fromCharCode(idx+A_CODE), val, this.state.message));\n        }\n    }\n\n    let newKey = this.state.key;\n    newKey[idx] = val;\n    this.updateKey(newKey)\n  }\n\n  updateActiveIdx(val){\n    this.setState({\n      activeIdx:val\n    });\n  }\n\n  updateKey(val) {\n    this.setState({\n      key:val,\n      displayKey:formatKey(val),\n    });\n  }\n\n  updateMessage(val) {\n    val = processMessage(val);\n    this.setState({\n      message:val,\n      displayMessage:toNGram(val, N_GRAM),\n    });\n  }\n\n  updateMode(val){\n    if(val === 'Decrypt') {\n      this.keyToDecrypt();\n      this.setState({\n        modeValue:val,\n        decrypt:true,\n      });\n    } else {\n      this.keyToEncrypt();\n      this.setState({\n        modeValue:val,\n        decrypt:false,\n      });\n    }\n  }\n\n  updateSearchSelection(val) {\n    this.setState({\n      searchSelection:val,\n    });\n  }\n  \n  setHome(val) {\n    this.setState({\n      home:val,\n    });\n  }\n\n  updateCypertext(val) {\n    this.setState({\n      cyphertext:val,\n      cyphertextFreq:getFreq(val),\n      cyphertextTotal:val.length,\n    });\n  }\n\n  clearResults() {\n    this.setState({\n      page:0,\n      resultTo:0,\n      resultFrom:0,\n      resultTotal:0,\n      resultPattern:[],\n      resultChisquare:[],\n      resultConflict:[],\n      resultFreq:[],\n      hideConflict:false,\n      queryResultsHideConflict:[],\n      queryResults:[],\n    });\n  }\n\n  /* -------- Home Page ------------------ */\n  \n  handleBreak() {\n    let cyphertext = '';\n    if(!this.state.decrypt) {\n        cyphertext = encrypt(this.state.key, this.state.message);\n        this.updateMode('Decrypt');\n    } else {\n        cyphertext = encrypt(keyFromDecryptToEncrypt(this.state.key), this.state.message);\n    }\n    if(cyphertext !== cyphertext.toLowerCase()) {\n      alert('ERROR: Message could not be encrypted. You have plaintext letters in your message that are not in the key.');\n      return;\n    }\n    this.clearResults();\n    this.updateCypertext(cyphertext);\n    this.setHome(!this.state.home);\n    this.updateSearchQuery('');\n  }\n\n  handleKeyDisplay(i) {\n    this.updateActiveIdx(i);\n  }\n\n  handleChangeMode(event) {\n    this.updateMode(event.target.value);\n    this.clearFocus();\n  }\n\n  handleEditMessage(event) {\n    this.updateMessage(event.target.value);\n  }\n\n  onKeyPress(event) {\n    if(this.state.activeIdx >= 0 && this.state.home) {\n        if( A_CODE <= event.which && event.which <= Z_CODE && this.codeNotInKey(event.which)) {\n            let char = String.fromCharCode(event.which);\n            if(!this.state.decrypt) {\n              char = char.toLowerCase();\n            }\n            this.updateKeyVal(char, this.state.activeIdx)\n            this.updateActiveIdx((this.state.activeIdx + 1) % LEN_ALPHABET);\n        } else if(event.which === DEL_CODE || event.which === BACKSPACE_CODE) {\n            this.updateKeyVal('', this.state.activeIdx);\n            this.updateActiveIdx((this.state.activeIdx - 1 + LEN_ALPHABET) % LEN_ALPHABET);\n        } else if(event.which === LEFT_ARROW_CODE) {\n            this.updateActiveIdx((this.state.activeIdx - 1 + LEN_ALPHABET) % LEN_ALPHABET);\n        } else if(event.which === RIGHT_ARROW_CODE) {\n            this.updateActiveIdx((this.state.activeIdx + 1) % LEN_ALPHABET);\n        }\n    } else if(!this.state.home) {\n        if( event.which === ENTER_CODE ) {\n          this.handleGo();\n        }\n    }\n  }\n\n  codeNotInKey(code) {\n    for(let i = 0; i < LEN_ALPHABET; i++) {\n      if(this.state.key[i] && this.state.key[i].toUpperCase().charCodeAt(0) === code) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  clearFocus() {\n    this.updateActiveIdx(-1);\n  }\n\n  keyToDecrypt() {\n    let newKey = Array(LEN_ALPHABET).fill(''); \n    for(let i = 0; i < LEN_ALPHABET; i++) {\n      if(this.state.key[i]) {\n        newKey[this.state.key[i].charCodeAt(0) - LOWERCASE_A_CODE] = String.fromCharCode(i + A_CODE);\n      }\n    }\n    this.updateMessage(decrypt(newKey, this.state.message));\n    this.updateKey(newKey);\n  }\n\n  keyToEncrypt() {\n    let newKey = Array(LEN_ALPHABET).fill(''); \n    for(let i = 0; i < LEN_ALPHABET; i++) {\n      if(this.state.key[i]) {\n        newKey[this.state.key[i].charCodeAt(0) - A_CODE] = String.fromCharCode(i + LOWERCASE_A_CODE);\n      }\n    }\n    this.updateMessage(encrypt(newKey, this.state.message));\n    this.updateKey(newKey);\n  }\n\n  handleRandomPT() {\n    let newMessage = RANDOM_PLAINTEXT[Math.floor(Math.random() * RANDOM_PLAINTEXT.length)];\n    while( newMessage === this.state.message ) {\n      newMessage = RANDOM_PLAINTEXT[Math.floor(Math.random() * RANDOM_PLAINTEXT.length)];\n    }\n    this.updateMode('Encrypt')\n    this.updateKey(Array(LEN_ALPHABET).fill(''));\n    this.updateMessage(newMessage);\n    this.clearFocus();\n  }\n\n  handleRandomCT() {\n    let newMessage = RANDOM_PLAINTEXT[Math.floor(Math.random() * RANDOM_PLAINTEXT.length)];\n    let key = [...LOWERCASE_LETTERS];\n    key = shuffle(key);\n    newMessage = encrypt(key, newMessage);\n\n    this.updateMode('Decrypt')\n    this.updateKey(Array(LEN_ALPHABET).fill(''));\n    this.updateMessage(newMessage);\n    this.clearFocus();\n  }\n\n  /* ---------------- Break Page -------------- */\n\n  handleSearchBack() {\n    if( this.state.searchQuery && this.state.searchSelection >= 0) {\n      let newKey = Array(LEN_ALPHABET).fill('');\n      let pattern = this.state.resultPattern[this.state.searchSelection];\n      for(let i = 0; i < pattern.length; i++) {\n        newKey[pattern.charCodeAt(i) - LOWERCASE_A_CODE] = this.state.searchQuery.charAt(i);\n      }\n      for(let i = 0; i < LEN_ALPHABET; i++) {\n        if( this.state.key[i] && !newKey[i] && !newKey.includes(this.state.key[i]) ) {\n          newKey[i] = this.state.key[i];\n        }\n      }\n      this.updateMessage(decrypt(newKey, this.state.cyphertext));\n      this.updateKey(newKey);\n    }\n    this.setHome(!this.state.home);\n  }\n\n  handleToggleConflict(event) {\n    this.updateHideConflict(event.target.checked);\n  }\n\n  handlePositionPrevious() {\n    if(this.state.page > 0) {\n      this.updateResultDisplay(this.state.page - 1);\n    }\n  }\n  \n  handlePositionNext() {\n    if(this.state.page * RESULTS_PER_PAGE + RESULTS_PER_PAGE < this.state.resultTotal) {\n      this.updateResultDisplay(this.state.page + 1);\n    }\n  }\n\n  frequencyClick() {\n    this.updateQueryResults(this.state.queryResults, false);\n  }\n\n  chisquareClick() {\n    this.updateQueryResults(this.state.queryResults, true);\n  }\n\n  compareChisquare(a, b) {\n    if(a.chisquare < b.chisquare) {\n      return -1;\n    }\n    if(a.chisquare > b.chisquare) {\n      return 1;\n    }\n    return 0;\n  }\n\n  compareFreq(a, b) {\n    if(a.freq > b.freq) {\n      return -1;\n    }\n    if(a.freq < b.freq) {\n      return 1;\n    }\n    return 0;\n  }\n\n  handleSelectSearch(i, event) {\n    this.updateSearchSelection(i);\n  }\n\n  handleEditSearch(event) {\n    this.updateSearchQuery(event.target.value);\n  }\n\n  handleGo() {\n    const cyphertext = this.state.cyphertext;\n    const searchQuery = this.state.searchQuery;\n    if(!searchQuery){\n      return [];\n    }\n\n    let queryTotal = 0.0;\n    let done = Array(LEN_ALPHABET).fill(false);\n    for( let i = 0; i < searchQuery.length; i++) {\n      let char = searchQuery.charCodeAt(i) - A_CODE;\n      if(!done[char]){\n        done[char] = true;\n        queryTotal += ENGLISH_FREQ[char];\n      }\n    }\n\n    let matches = new Map();\n    //Load all patterns that match the search query into matches, with value equal to the pattern's frequency\n    for(let i = 0; i < cyphertext.length - searchQuery.length + 1; i++) {\n      let pattern = cyphertext.substring(i, i + searchQuery.length);\n      let match = true;\n      let key = Array(LEN_ALPHABET).fill('');\n      let cyphertextTotal = 0;\n\n      for(let j = 0; j < pattern.length; j++ ){\n        let idx = pattern.charCodeAt(j) - LOWERCASE_A_CODE;\n        let val = searchQuery.charAt(j);\n        if( !key[idx] && !key.includes(val)){\n            key[idx] = val;\n            cyphertextTotal += this.state.cyphertextFreq[idx];\n        } else if(key[idx] !== val){\n            match = false;\n            break;\n        }\n      }\n\n      if(!match) {\n        continue;\n      }\n\n      if(matches.has(pattern)) {\n          matches.get(pattern).freq = (parseInt(matches.get(pattern).freq) + 1);      \n      //only computed once per pattern\n      } else {\n          let chisquare = 0;\n          let done = Array(LEN_ALPHABET).fill(false);\n          for( let j = 0; j < pattern.length; j++) {\n            let cyphertextChar = pattern.charCodeAt(j) - LOWERCASE_A_CODE;\n            if(done[cyphertextChar]) {\n              continue;\n            }\n            done[cyphertextChar] = true;\n            let plaintextChar = searchQuery.charCodeAt(j) - A_CODE;\n            let divisor = cyphertextTotal * ( ENGLISH_FREQ[plaintextChar] / (1.0 * queryTotal) );\n            chisquare += Math.pow((this.state.cyphertextFreq[cyphertextChar] - divisor), 2) / (1.0 * divisor);\n          }\n          let conflicts = 0;\n          for( let j = 0; j < LEN_ALPHABET; j++ ) {\n            if( key[j] && ( (this.state.key[j] && this.state.key[j] !== key[j]) \n                       ||   (this.state.key.includes(key[j]) && this.state.key[j] !== key[j]) )) {\n              conflicts += 1;\n            }\n          }\n          matches.set(pattern, {freq:1, pattern:pattern, chisquare:chisquare, conflicts:conflicts});\n      }\n    }\n    let queryResults = [];\n    for( const [key, value] of matches) {\n      queryResults.push(value);\n    }\n\n    this.updateQueryResults(queryResults);\n  }\n\n  /* ------------------ App ------------------- */\n\n  renderPage() {\n    if(this.state.home) {\n      return(\n          <Box width='large' alignSelf='center'>\n            <HomeGrid\n              handleBreak={()=> this.handleBreak()}\n              modeValue={this.state.modeValue}\n              decrypt={this.state.decrypt}\n              keyVal={this.state.displayKey}\n              handleKeyDisplay={(i) => this.handleKeyDisplay(i)}\n              handleChangeMode={(event)=>this.handleChangeMode(event)}\n              handleEditMessage={(event)=>this.handleEditMessage(event)}\n              handleSelectMessage={()=>this.clearFocus()}\n              displayMessage={this.state.displayMessage}\n              focusedBox={this.state.activeIdx}\n              handleRandomPT={()=>this.handleRandomPT()}\n              handleRandomCT={()=>this.handleRandomCT()}\n            >\n            </HomeGrid>\n          </Box>\n      );\n    } else {\n        return(\n          <Box width='large' alignSelf='center'>\n            <BreakGrid \n              handleSelectSearch={(i) => this.handleSelectSearch(i)}\n              selectedButton={this.state.searchSelection}\n              searchQuery={this.state.searchQuery}\n              handleEditSearch={(event) => this.handleEditSearch(event)}\n              handleGo={() => this.handleGo()}\n              resultConflict={this.state.resultConflict}\n              resultChisquare={this.state.resultChisquare}\n              resultFreq={this.state.resultFreq}\n              resultPattern={this.state.resultPattern}\n              resultFrom={this.state.resultFrom}\n              resultTo={this.state.resultTo}\n              resultTotal={this.state.resultTotal}\n              frequencyClick={() => this.frequencyClick()}\n              chisquareClick={() => this.chisquareClick()}\n              handlePositionNext={() => this.handlePositionNext()}\n              handlePositionPrevious={() => this.handlePositionPrevious()}\n              handleToggleConflict={(event) => this.handleToggleConflict(event)}\n              handleSearchBack={()=> this.handleSearchBack()}\n            >\n            </BreakGrid>\n          </Box>\n        );\n    }\n  }\n\n  render () {\n    return (\n      <Grommet theme={theme} full>\n        <Main>\n          {this.renderPage()}\n        </Main>\n      </Grommet>\n    );\n  }\n}\n\nfunction keyFromDecryptToEncrypt(key){\n    let newKey = Array(LEN_ALPHABET).fill(''); \n    for(let i = 0; i < LEN_ALPHABET; i++) {\n      if(key[i]) {\n        newKey[key[i].charCodeAt(0) - A_CODE] = String.fromCharCode(i + LOWERCASE_A_CODE);\n      }\n    }\n    return newKey;\n}\n\n/**\n * encrypts the message\n * @param {char[]} key \n * @param {String} message \n */\nfunction encrypt(key, message) {\n  let output = '';\n  for(let i = 0; i < message.length; i++){\n    if(A_CODE <= message.charCodeAt(i) && message.charCodeAt(i) <= Z_CODE) {\n        let idx = message.charCodeAt(i) - A_CODE;\n        if(key[idx]){\n            output += key[idx];\n        } else {\n            output += message.charAt(i);\n        }\n    } else {\n        output += message.charAt(i);\n    }\n  }\n  return output;\n}\n\n/**\n * Decrypts the message\n * @param {char[]} key \n * @param {String} message \n */\nfunction decrypt(key, message) {\n  let output = '';\n  for(let i = 0; i < message.length; i++){\n    if(LOWERCASE_A_CODE <= message.charCodeAt(i) && message.charCodeAt(i) <= LOWERCASE_Z_CODE) {\n        let idx = message.charCodeAt(i) - LOWERCASE_A_CODE;\n        if(key[idx]){\n            output += key[idx];\n        } else {\n            output += message.charAt(i);\n        }\n    } else {\n        output += message.charAt(i);\n    }\n  }\n  return output;\n}\n\n/**\n * encrypts all plaintext chars that match from to cypertext char that maches to\n * @param {char} from the plaintext\n * @param {char} to the cypertext\n * @param {String} message \n */\nfunction swapChar(from, to, message){\n  let output = '';\n  for(let i = 0; i < message.length; i++) {\n    if(message.charAt(i) === from) {\n        output += to;\n    } else {\n        output += message.charAt(i)\n    }\n  }\n  return output;\n}\n\n/**\n * Formats the key\n * @param {String} key the key to be formated\n */\nfunction formatKey(key) {\n  let formatedKey = Array(LEN_ALPHABET).fill(DASH);\n  for(let i = 0; i < key.length; i++){\n    if(key[i]) {\n      formatedKey[i] = key[i];\n    }\n  }\n  return formatedKey;\n}\n\n/**\n * Returns an array with the frequencies of the message\n * @param {String} message the message to be looked at\n */\nfunction getFreq(message) {\n  let output = Array(LEN_ALPHABET).fill(0);\n  message = message.toUpperCase();\n  for(let i = 0; i < message.length; i ++) {\n    output[message.charCodeAt(i) - A_CODE]++;\n  }\n  return output;\n}\n\n/**\n * Returns the message broken into blocks of n chars, separated by a space\n * @param {String} message the string to be processed\n * @param {Integer} n the size of each block, must be greater than 0\n * @returns message broken into n-grams\n */\nfunction toNGram(message, n) {\n  let output = '';\n  for(let i = 0; i < message.length; i++) {\n    output += message.charAt(i);\n    //if i is at the end of a n-gram, add a space\n    if( (i % n) === (n - 1) ) {\n      output += SPACE;\n    }\n  }\n  return output;\n}\n\n/**\n * Converts message to upper case, removes all characters not in range [A,Z]\n * @param {String} message the string to be processed\n * @returns processed string\n */\nfunction processMessage(message) {\n  let output = '';\n  let tempMessage = message.toUpperCase();\n  for(let i = 0; i < tempMessage.length; i++) {\n    //concat char to the end of output\n    let char = tempMessage.charCodeAt(i);\n    if( A_CODE <= char && char <= Z_CODE ) {\n      output += message.charAt(i);\n    }\n  }\n  return output;\n}\n\n/**\n * Converts message to upper case, removes all characters not in range [A,Z]\n * @param {String} message the string to be processed\n * @returns processed string\n */\nfunction processSearchQuery(message) {\n  let output = '';\n  message = message.toUpperCase();\n  for(let i = 0; i < message.length; i++) {\n    //concat char to the end of output\n    let char = message.charCodeAt(i);\n    if( A_CODE <= char && char <= Z_CODE ) {\n      output += message.charAt(i);\n    }\n  }\n  return output;\n}\n\n/**\n * Credit to: https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n * Shuffles array in place. ES6 version\n * @param {Array} a items An array containing the items.\n */\nfunction shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}