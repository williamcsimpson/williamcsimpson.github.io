{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ENGLISH_FREQ","RANDOM_PLAINTEXT","RANDOM_KEY","theme","global","colors","brand","font","family","size","height","HomeGrid","props","Grid","areas","name","start","end","columns","rows","gap","margin","Box","gridArea","TextArea","onChange","handleMessageEdit","value","message","placeholder","resize","fill","spellCheck","focus","TextInput","handleKeyEdit","keyVal","Button","label","onClick","handleEncrypt","handleDecrypt","handleBreak","handleRandomPT","handleRandomCT","BreakGrid","border","round","align","Text","Markdown","keyDisplay","sampleMessage","width","data","barGap","dataKey","isAnimationActive","allign","RangeInput","min","max","sliderDefault","handleSlider","direction","alignContent","alignSelf","icon","Subtract","handlePeriodMinus","Add","handlePeriodPlus","Previous","handlePositionPrevious","Next","handlePositionNext","handleDecryptBreak","getFreq","period","position","output","Array","total","i","length","charCodeAt","boldN","string","n","parseInt","charAt","freqArray","freq","offset","inverseOffset","globalName","String","fromCharCode","localName","push","decryptVigenere","cyphertext","key","encryptVigenere","plaintext","toNGram","processMessage","toUpperCase","char","App","state","messageBox","home","breakKeyDisplay","sliderPos","updateData","this","setState","event","updateMessae","target","newMessage","pos","input","newMessageBox","substring","updateKey","newKey","newKeyBox","enc","dec","newLen","newPeriod","handleNewPeriod","newPos","handleNewPosition","Math","floor","random","handleEditMessage","handleEditKey","Grommet","full","Main","renderPage","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6f2c9435.chunk.js","sourcesContent":["import React from 'react';\nimport { \n  Box, \n  Button,\n  Grid,\n  Grommet,\n  Main,\n  RangeInput,\n  Text,\n  TextArea,\n  TextInput,\n  Markdown,\n} from 'grommet';\nimport {\n  Add,\n  Subtract,\n  Previous,\n  Next,\n} from 'grommet-icons'\nimport {\n  Bar,\n  BarChart,\n  ComposedChart,\n  XAxis,\n} from 'recharts';\nimport { isCompositeComponent } from 'react-dom/test-utils';\n\nconst A_CODE = 65;\nconst Z_CODE = 90;\nconst GRAPH_HEIGHT = 384; //grommet medium\nconst GRAPH_WIDTH = 580; //grommet large\nconst SPACE = ' ';\nconst LEN_ALPHABET = 26;\nconst TEXT_BOX_N_GRAM = 5;\nconst MAX_KEY_LEN = 15;\nconst MAX_MESSAGE_LEN = 23;\nconst ENGLISH_FREQ = [0.08167, 0.01492, 0.02202, 0.04253, 0.12702, 0.02228, \n                      0.02015, 0.06094, 0.06966, 0.00153, 0.01292, 0.04025, \n                      0.02406, 0.06749, 0.07507, 0.01929, 0.00095, 0.05987,\n                      0.06327, 0.09356, 0.02758, 0.00978, 0.02560, 0.00150, \n                      0.01994, 0.00077];\nconstn                          'THEMOSTNOTICEABLEEFFECTTHISCOMMUNICATIONHASONTHEGAMEISTHEDELAYINMOVINGSUPPOSEAPLAYERTYPESAMOVEFORHISSHIPANDHITSRETURNWHATHAPPENSTHENTHEPLAYERPROCESSSAVESUPMESSAGESTOBEWRITTENTOTHETEMPORARYFILEINABUFFEREVERYSEVENSECONDSORSOTHEPLAYERPROCESSGETSEXCLUSIVEACCESSTOTHETEMPORARYFILEANDWRITESOUTITSBUFFERTOTHEFILETHEDRIVERRUNNINGASYNCHRONOUSLYMUSTREADINTHEMOVEMENTCOMMANDPROCESSITANDWRITEOUTTHERESULTSTHISTAKESTWOEXCLUSIVEACCESSESTOTHETEMPORARYFILEFINALLYWHENTHEPLAYERPROCESSGETSAROUNDTODOINGANOTHERSEVENSECONDUPDATETHERESULTSOFTHEMOVEAREDISPLAYEDONTHESCREENHENCEEVERYMOVEMENTREQUIRESFOUREXCLUSIVEACCESSESTOTHETEMPORARYFILEANYWHEREFROMSEVENTOTWENTYONESECONDSDEPENDINGUPONASYNCHRONYBEFORETHEPLAYERSEESTHERESULTSOFHISMOVESAFTERTHEPLAYERWRITESOUTAFIRSTMOVEMENTMESSAGEASECONDMOVEMENTCOMMANDCANTHENBEISSUEDTHEFIRSTMESSAGEWILLBEINTHETEMPORARYFILEWAITINGFORTHEDRIVERANDTHESECONDWILLBEINTHEFILEBUFFERWAITINGTOBEWRITTENTOTHEFILETHUSBYALWAYSTYPINGMOVESATURNAHEADOFTHETIMETHEPLAYERCANSAILAROUNDQUITEQUICKLY',\n                          'IFYOUHAVENEVERPLAYEDSOLITAIREBEFOREITISRECOMMENDEDTHATYOUCONSULTASOLITAIREINSTRUCTIONBOOKINCANFIELDTABLEAUCARDSMAYBEBUILTONEACHOTHERDOWNWARDINALTERNATECOLORSANENTIREPILEMUSTBEMOVEDASAUNITINBUILDINGTOPCARDSOFTHEPILESAREAVAILABLETOBEPLAYEDONFOUNDATIONSBUTNEVERINTOEMPTYSPACESSPACESMUSTBEFILLEDFROMTHESTOCKTHETOPCARDOFTHESTOCKALSOISAVAILABLETOBEPLAYEDONFOUNDATIONSORBUILTONTABLEAUPILESAFTERTHESTOCKISEXHAUSTEDTABLEAUSPACESMAYBEFILLEDFROMTHETALONANDTHEPLAYERMAYKEEPTHEMOPENUNTILHEWISHESTOUSETHEMCARDSAREDEALTFROMTHEHANDTOTHETALONBYTHREESANDTHISREPEATSUNTILTHEREARENOMORECARDSINTHEHANDORTHEPLAYERQUITSTOHAVECARDSDEALTONTOTHETALONTHEPLAYERTYPESHTFORHISMOVEFOUNDATIONBASECARDSAREALSOAUTOMATICALLYMOVEDTOTHEFOUNDATIONWHENTHEYBECOMEAVAILABLE',\n                          'ROBOTSPITSYOUAGAINSTEVILROBOTSWHOARETRYINGTOKILLYOUWHICHISWHYTHEYAREEVILFORTUNATELYFORYOUEVENTHOUGHTHEYAREEVILTHEYARENOTVERYBRIGHTANDHAVEAHABITOFBUMPINGINTOEACHOTHERTHUSDESTROYINGTHEMSELVESINORDERTOSURVIVEYOUMUSTGETTHEMTOKILLEACHOTHEROFFSINCEYOUHAVENOOFFENSIVEWEAPONRYSINCEYOUARESTUCKWITHOUTOFFENSIVEWEAPONRYYOUAREENDOWEDWITHONEPIECEOFDEFENSIVEWEAPONRYATELEPORTATIONDEVICEWHENTWOROBOTSRUNINTOEACHOTHERORAJUNKPILETHEYDIEIFAROBOTRUNSINTOYOUYOUDIEWHENAROBOTDIESYOUGETTENPOINTSANDWHENALLTHEROBOTSDIEYOUSTARTONTHENEXTFIELDTHISKEEPSUPUNTILTHEYFINALLYGETYOUONLYFIVESCORESAREALLOWEDPERUSERONTHESCOREFILEIFYOUMAKEITINTOTHESCOREFILEYOUWILLBESHOWNTHELISTATTHEENDOFTHEGAMEIFANALTERNATESCOREFILEISSPECIFIEDTHATWILLBEUSEDINSTEADOFTHESTANDARDFILEFORSCORESY',\n                          'ATTHESTARTOFTHEFIRSTGAMETHEPROGRAMASKSTHEPLAYERTOCUTTHEDECKTODETERMINEWHOGETSTHEFIRSTCRIBTHEUSERSHOULDRESPONDWITHANUMBERBETWEENZEROANDFIFTYONEINDICATINGHOWMANYCARDSDOWNTHEDECKISTOBECUTTHEPLAYERWHOCUTSTHELOWERRANKEDCARDGETSTHEFIRSTCRIBIFMORETHANONEGAMEISPLAYEDTHELOSEROFTHEPREVIOUSGAMEGETSTHEFIRSTCRIBINTHECURRENTGAMEFOREACHHANDTHEPROGRAMFIRSTPRINTSTHEPLAYERSHANDWHOSECRIBITISANDTHENASKSTHEPLAYERTODISCARDTWOCARDSINTOTHECRIBTHECARDSAREPROMPTEDFORONEPERLINEANDARETYPEDASEXPLAINEDBELOWAFTERCUTTINGTHEDECKPLAYSTARTSWITHTHENONDEALERTHEPERSONWHODOESNTHAVETHECRIBLEADINGTHEFIRSTCARDPLAYCONTINUESASPERCRIBBAGEUNTILALLCARDSAREEXHAUSTEDTHEPROGRAMKEEPSTRACKOFTHESCORINGOFALLPOINTSANDTHETOTALOFTHECARDSONTHETABLEAFTERPLAYTHEHANDSARESCOREDTHEPROGRAMREQUESTSTHEPLAYERTOSCOREHISHANDANDTHECRIBIFITISHISBYPRINTINGOUTTHEAPPROPRIATECARDSANDTHECUTCARDENCLOSEDINBRACKETSPLAYCONTINUESUNTILONEPLAYERREACHESTHEGAMELIMITACARRIAGERETURNWHENANUMERICINPUTISEXPECTEDISEQUIVALENTTOTYPINGTHELOWESTLEGALVALUEWHENCUTTINGTHEDECKTHISISEQUIVALENTTOCHOOSINGTHETOPCARD'];\nconst RANDOM_KEY = ['AWESOME', 'VOLCANO', 'REWARD', 'HUNTER', 'ABSTRACT', 'MEDICINE', 'NIGHT', 'TOAST'];\n\nconst theme = {\n  global: {\n    colors: {\n      brand: '#228BE6',\n    },\n    font: {\n      family: 'Courier New',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\nfunction HomeGrid(props) { \n  return (\n    <Grid\n      areas={[\n        { name: 'text', start: [0, 0], end: [3, 0] },\n        { name: 'key', start: [0, 1], end: [1, 1] },\n        { name: 'encrypt', start: [2, 2], end: [2, 2] },\n        { name: 'decrypt', start: [3, 2], end: [3, 2] },\n        { name: 'break', start: [1, 2], end: [1, 2] },\n        { name: 'randPT', start: [2, 1], end: [2, 1] },\n        { name: 'randCT', start: [3, 1], end: [3, 1] },\n      ]}\n      columns={['auto', 'auto', 'auto', 'auto']}\n      rows={['medium', 'xxsmall', 'xxsmall']}\n      gap='small'\n      margin='xlarge'\n    >\n      <Box gridArea='text'> \n       <TextArea\n          onChange = {props.handleMessageEdit}\n          value = {props.message}\n          placeholder=\"Type message here...\"\n          resize={false}\n          fill={true}\n          name='TextInput'\n          spellCheck='false'\n          focus={false}\n        />\n      </Box>\n      <Box gridArea='key'>\n        <TextInput\n          onChange = {props.handleKeyEdit}\n          value = {props.keyVal}\n          placeholder='Type key here...'\n          spellCheck='false'\n          focus={false}\n        />\n      </Box>\n      <Box gridArea='encrypt'>\n        <Button\n          label='Encrypt'\n          size='small'\n          onClick = {props.handleEncrypt}\n        />\n      </Box>\n      <Box gridArea='decrypt'>\n        <Button\n          label='Decrypt'\n          size='small'\n          onClick={props.handleDecrypt}\n        />\n      </Box> \n      <Box gridArea='break'>\n        <Button\n          label='Break'\n          size='small'\n          onClick={props.handleBreak}\n        />\n      </Box>\n      <Box gridArea='randPT'>\n        <Button\n          label='Random Plaintext'\n          size='small'\n          onClick={props.handleRandomPT}\n        />\n      </Box>\n      <Box gridArea='randCT'>\n        <Button\n          label='Random Cyphertext'\n          size='small'\n          onClick={props.handleRandomCT}\n        />\n      </Box>\n    </Grid>\n  );\n}\n\nfunction BreakGrid(props) { \n  return (\n    <Grid\n      areas={[\n        { name: 'keyword', start: [1, 0], end: [1, 0] },\n        { name: 'sampleText', start: [3, 0], end: [3, 0] },\n        { name: 'graph', start: [0, 1], end: [4, 1] },\n        { name: 'slider', start: [0, 2], end: [4, 2] },\n        { name: 'period', start: [0, 3], end: [1, 3] },\n        { name: 'position', start: [2, 3], end: [3, 3] },\n        { name: 'decrypt', start: [4, 3], end: [4, 3] },\n      ]}\n      columns={['auto', 'auto', 'auto', 'auto', 'auto']}\n      rows={['xxsmall', 'medium', 'xxsmall', 'xxsmall']}\n      gap='small'\n      margin='xlarge'\n    >\n      <Box \n        gridArea='keyword'\n        border='true'\n        round='small'\n        align='center'\n      > \n        <Text>----Keyword----</Text>\n        <Markdown>{props.keyDisplay}</Markdown>\n      </Box>\n      <Box \n        gridArea='sampleText'\n        border='true'\n        round='small'\n        align='center'\n      > \n        <Text>Sample Text</Text>\n        <Markdown>{props.sampleMessage}</Markdown>\n      </Box>\n      <Box gridArea='graph'> \n        <ComposedChart \n          width={GRAPH_WIDTH}\n          height={GRAPH_HEIGHT}\n          data={props.data}\n          barGap={0}\n        >\n          <XAxis dataKey='localName' />\n          <Bar \n            dataKey='localFreq'\n            isAnimationActive={false}\n            fill='#228BE6'\n          />\n          <Bar \n            dataKey='globalFreq' \n            isAnimationActive={false}\n            fill='#E67D22'\n          />\n        </ComposedChart>\n        <BarChart \n          width={GRAPH_WIDTH}\n          height={25}\n          data={props.data}\n        >\n          <XAxis dataKey='globalName' />\n        </BarChart>\n      </Box>\n      <Box \n        gridArea='slider'\n        allign='baseline'\n      > \n        <RangeInput\n          min={0}\n          max={25}\n          value={props.sliderDefault}\n          onChange={props.handleSlider}\n        />\n      </Box>\n      <Box \n        gridArea='period'\n        direction='row'\n        align='baseline'\n        alignContent='around'\n        alignSelf='stretch'\n      > \n        <Text>Period:</Text>\n        <Button\n          icon={<Subtract size='small' />}\n          size='small'\n          onClick={props.handlePeriodMinus}\n        />\n        <Button\n          icon={<Add size='small'/>}\n          size='small'\n          onClick={props.handlePeriodPlus}\n        />\n      </Box>\n      <Box \n        gridArea='position'\n        direction='row'\n        align='baseline'\n        alignContent='around'\n        alignSelf='stretch'\n      > \n        <Text>Positon:</Text>\n        <Button\n          icon={<Previous size='small' />}\n          size='small'\n          onClick={props.handlePositionPrevious}\n        />\n        <Button\n          icon={<Next size='small'/>}\n          size='small'\n          onClick={props.handlePositionNext}\n        />\n      </Box>\n      <Box gridArea='decrypt'> \n        <Button\n          label='Decrypt'\n          size='small'\n          onClick={props.handleDecryptBreak}\n        />\n      </Box>\n    </Grid>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: '',\n      messageBox: '',\n      key: '',\n      keyDisplay: '',\n      home: true,\n      offset: 0,\n      data: Array(),\n      sampleMessage: '',\n      breakKeyDisplay:'',\n      position: 0,\n      sliderPos:0,\n    };\n    this.updateData(0);\n  }\n\n  updateData(offset, position = this.state.position, period = this.state.key.length) {\n    this.setState({\n      data: freqArray(getFreq(this.state.message, period, position), offset),\n    });\n  }\n\n  handleDecryptBreak(event) {\n    this.setState({\n      home: !this.state.home,\n    });\n    this.handleDecrypt(event);\n  }\n\n  handleEditMessage (event) {\n    this.updateMessae(event.target.value);\n  }\n  \n  updateMessae( newMessage, pos = this.state.position, key = this.state.key ) {\n    let input = processMessage(newMessage);\n    let newMessageBox = toNGram(input,TEXT_BOX_N_GRAM);\n    /**\n    if( newMessageBox === this.state.messageBox ) {\n      newMessageBox += ' ';\n    }\n    */\n    this.setState({\n      message:input,\n      messageBox:newMessageBox,\n      sampleMessage:boldN(decryptVigenere(input.substring(0, MAX_MESSAGE_LEN), this.state.key), pos, key.length),\n    });    \n  }\n\n  handleEditKey(event) {\n    this.updateKey(event.target.value);\n  }\n\n  updateKey( newKey, pos = this.state.position ) {\n    let input = processMessage(newKey);\n    let newKeyBox = input;\n    /**\n    if( newKeyBox === this.state.keyDisplay ) {\n      newKeyBox += ' ';\n    }\n    */\n    this.setState({\n      key:input,\n      keyDisplay:newKeyBox,\n      breakKeyDisplay:boldN(input, pos, input.length),\n      sampleMessage:boldN(decryptVigenere(this.state.message.substring(0, MAX_MESSAGE_LEN), input), pos, input.length),\n    });    \n  }\n\n  handleEncrypt(event) {\n    if(this.state.key.length <= 0) {\n      return;\n    }\n    let enc = encryptVigenere( this.state.message, this.state.key );\n    this.updateMessae(enc);\n  }\n\n  handleDecrypt(event) {\n    if(this.state.key.length <= 0) {\n      return;\n    }\n    let dec = decryptVigenere( this.state.message, this.state.key );\n    this.updateMessae(dec);\n  }\n\n  handleSlider(event) {\n    this.setState({\n      offset: event.target.value,\n      sliderPos: event.target.value,\n    });\n    this.updateData(event.target.value);\n    let newKey = this.state.key.substring(0, this.state.position); \n    newKey += String.fromCharCode(A_CODE + ((LEN_ALPHABET - parseInt(event.target.value)) % LEN_ALPHABET) ); \n    newKey += this.state.key.substring(this.state.position + 1);\n    this.updateKey(newKey);\n    this.setState({\n      sampleMessage:boldN(decryptVigenere(this.state.message.substring(0, MAX_MESSAGE_LEN), newKey), this.state.position, newKey.length),\n    });\n  }\n\n  handleBreak(event) {\n    let offset = this.state.key.charCodeAt(this.state.position) - A_CODE;\n    let position = this.state.position;\n    let period = this.state.key.length;\n    this.setState({\n      home: !this.state.home,\n      offset: (this.state.key.charCodeAt(0) - A_CODE),\n    });\n    this.updateData(0);\n    if(this.state.key === '') {\n      this.updateKey('A');\n      this.setState({\n        sampleMessage:boldN(decryptVigenere(this.state.message.substring(0, MAX_MESSAGE_LEN), 'A'), this.state.position, 1),\n        offset: 0,\n      });\n      offset = 0;\n      position = 0;\n      period = 1;\n    }\n    this.updateData(offset, position, period);\n  }\n\n  handleNewPeriod(newLen) {\n    if(newLen <= 0 || newLen > MAX_KEY_LEN) {\n        return;\n    }\n    let newKey = ''\n    for(let i = 0; i < newLen; i++) {\n      newKey += 'A';\n    }\n    this.setState({\n      position:0,\n      offset:0,\n      sliderPos:0,\n    });\n    this.updateKey(newKey, 0);\n    this.updateMessae(this.state.message, 0, newKey);\n    this.updateData(0, 0, newLen);\n  }\n\n  handlePeriodMinus(event) {\n    let newPeriod = this.state.key.length - 1;\n    this.handleNewPeriod(newPeriod);\n  }\n\n  handlePeriodPlus(event) {\n    let newPeriod = this.state.key.length + 1;\n    this.handleNewPeriod(newPeriod);\n  }\n\n  handleNewPosition(newPos){\n    if(newPos < 0 || newPos >= this.state.key.length) {\n      return;\n    }\n    this.setState({\n      position:newPos,\n      breakKeyDisplay:boldN(this.state.key, newPos, this.state.key.length),\n      sampleMessage:boldN(processMessage(this.state.sampleMessage), newPos, this.state.key.length),\n      sliderPos:(Z_CODE - this.state.key.charCodeAt(newPos) + 1) % LEN_ALPHABET,\n      offset:this.state.key.charCodeAt(newPos),\n    });\n    this.updateData(Z_CODE - this.state.key.charCodeAt(newPos) + 1, newPos);\n  }\n\n  handlePositionNext(event) {\n    this.handleNewPosition(this.state.position + 1);    \n  }\n\n  handlePositionPrevious(event) {\n    this.handleNewPosition(this.state.position - 1);    \n  }\n\n  handleRandomCT(event) {\n    let key = RANDOM_KEY[Math.floor(Math.random() * RANDOM_KEY.length)];\n    this.updateKey('');\n    this.updateMessae( encryptVigenere(RANDOM_PLAINTEXT[Math.floor(Math.random() * RANDOM_PLAINTEXT.length)], key));\n  }\n\n  handleRandomPT(event) {\n    this.updateKey('');\n    this.updateMessae(RANDOM_PLAINTEXT[Math.floor(Math.random() * RANDOM_PLAINTEXT.length)]);\n  }\n\n  renderPage() {\n    if(this.state.home) {\n      return(\n          <Box width='large' alignSelf='center'>\n            <HomeGrid\n              message={this.state.messageBox}\n              handleMessageEdit={event => this.handleEditMessage(event)}\n              handleKeyEdit={event => this.handleEditKey(event)}\n              keyVal={this.state.keyDisplay}\n              handleEncrypt={event => this.handleEncrypt(event)}\n              handleDecrypt={event => this.handleDecrypt(event)}\n              handleBreak={event => this.handleBreak(event)}\n              handleRandomPT={event => this.handleRandomPT(event)}\n              handleRandomCT={event => this.handleRandomCT(event)}\n            >\n            </HomeGrid>\n          </Box>\n      );\n    } else {\n        return(\n          <Box width='large' alignSelf='center'>\n            <BreakGrid \n              handleDecryptBreak={event => this.handleDecryptBreak(event)}\n              handleSlider={event => this.handleSlider(event)}\n              data={this.state.data}\n              keyDisplay={this.state.breakKeyDisplay}\n              sampleMessage={this.state.sampleMessage}\n              handlePeriodMinus={event => this.handlePeriodMinus(event)}\n              handlePeriodPlus={event => this.handlePeriodPlus(event)}\n              handlePositionNext={event => this.handlePositionNext(event)}\n              handlePositionPrevious={event => this.handlePositionPrevious(event)}\n              sliderDefault={this.state.sliderPos}\n            >\n            </BreakGrid>\n          </Box>\n        );\n    }\n  }\n\n  render () {\n    return (\n      <Grommet theme={theme} full>\n        <Main>\n          {this.renderPage()}\n        </Main>\n      </Grommet>\n    );\n  }\n}\n\n/**\n * Returns an array with the frequencies of every period-th character,\n * starting at the positon character in the message\n * @param {String} message the message to be looked at\n * @param {int} period the length of the key\n * @param {int} position the character we want in the key\n */\nfunction getFreq(message, period, position) {\n  let output = Array(LEN_ALPHABET).fill(0);\n  let total = 0;\n  if(period === 0) {\n    return output;\n  }\n  for(let i = position; i < message.length; i += period) {\n    output[message.charCodeAt(i) - A_CODE]++;\n    total++;\n  }\n  if(total > 0) {\n    for(let i = 0; i < output.length; i++){\n      output[i] = (1.0 *output[i]) / (1.0 *total);\n    }\n  }\n  return output;\n}\n\n/**\n * Bolds every nth character in the string\n * @param {String} string \n * @param {int} n in range [0, string.length-1]\n */\nfunction boldN(string, n, period) {\n  let output = '';\n  for(let i = 0; i < string.length; i++) {\n    if( i  % period === parseInt(n)) {\n      output += '**' + string.charAt(i) + '**';\n    } else {\n      output += string.charAt(i);\n    }\n  }\n  return output;\n}\n\n/**\n * Formats and returns an array with letter frequencies\n * @param {float[]} freq\n * @param {int} offset\n */\nfunction freqArray(freq, offset) {\n  let data = Array();\n  for(let i = 0; i < LEN_ALPHABET; i++) {\n    //I don't know why it needs an inverse offset\n    let inverseOffset = (i - parseInt(offset) + LEN_ALPHABET) % LEN_ALPHABET;\n    let globalName = String.fromCharCode(A_CODE + i);\n    let localName = String.fromCharCode(A_CODE + inverseOffset);\n    data.push({'globalName': globalName, 'globalFreq': ENGLISH_FREQ[i], 'localName': localName, 'localFreq': freq[inverseOffset]});\n  }\n  return data;\n}\n\n/**\n * Decrypts a given cyphertext and key using a vigenere cypher\n * @param {String} cyphertext the message to decrypt. Must be in character set [A-Z]\n * @param {String} key the key used to decrypt message. \n *                     Must be longer than 0, and in charater set [A-Z] \n * @returns decrypted messaged as a string\n */\nfunction decryptVigenere (cyphertext, key) {\n  if(key.length <= 0) {\n    return cyphertext;\n  }\n  let output = '';\n  for(let i = 0; i < cyphertext.length; i++) {\n    output += String.fromCharCode(A_CODE + (( (cyphertext.charCodeAt(i) - A_CODE) - (key.charCodeAt(i % key.length) - A_CODE) + LEN_ALPHABET) % LEN_ALPHABET));\n  }\n  return output;\n}\n\n/**\n * Encripts a given plaintext and key using a vigenere cypher\n * @param {String} plaintext the message to encrypt. Must be in character set [A-Z]\n * @param {String} key the key used to encrypt message. \n *                     Must be longer than 0, and in charater set [A-Z] \n * @returns encrypted messaged as a string\n */\nfunction encryptVigenere (plaintext, key) {\n  let output = '';\n  for(let i = 0; i < plaintext.length; i++) {\n    output += String.fromCharCode(A_CODE + (( (plaintext.charCodeAt(i) - A_CODE) + (key.charCodeAt(i % key.length) - A_CODE) ) % LEN_ALPHABET));\n  }\n  return output;\n}\n\n/**\n * Returns the message broken into blocks of n chars, separated by a space\n * @param {String} message the string to be processed\n * @param {Integer} n the size of each block, must be greater than 0\n * @returns message broken into n-grams\n */\nfunction toNGram(message, n) {\n  let output = '';\n  for(let i = 0; i < message.length; i++) {\n    output += message.charAt(i);\n    //if i is at the end of a n-gram, add a space\n    if( (i % n) === (n - 1) ) {\n      output += SPACE;\n    }\n  }\n  return output;\n}\n\n/**\n * Converts message to upper case, removes all characters not in range [A,Z]\n * @param {String} message the string to be processed\n * @returns processed string\n */\nfunction processMessage(message) {\n  message = message.toUpperCase();\n  let output = '';\n  for(let i = 0; i < message.length; i++) {\n    //concat char to the end of output\n    let char = message.charCodeAt(i);\n    if( A_CODE <= char && char <= Z_CODE ) {\n      output += message.charAt(i);\n    }\n  }\n  return output;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}