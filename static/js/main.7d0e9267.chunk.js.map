{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ENGLISH_BIGRAMS","RANDOM_PLAINTEXT","theme","global","colors","brand","font","family","size","height","breakTable","data","onClick","fill","body","i","row","j","push","TableCell","scope","verticalAlign","border","pad","Box","focusIndicator","background","Text","alignSelf","breakTableCell","length","TableRow","Table","TableBody","HomeGrid","props","Grid","areas","name","start","end","columns","rows","gap","margin","gridArea","TextArea","onChange","handleMessageEdit","value","displayMessage","placeholder","resize","spellCheck","focus","TextInput","handleKeyEdit","displayKey","Button","label","handleEncrypt","handleDecrypt","handleBreak","handleRandomPT","handleRandomCT","BreakGrid","alignContent","justify","handleClickTable","tableFill","keyChart","direction","align","icon","Subtract","handlePeriodMinus","Add","handlePeriodPlus","validKey","handleBack","countSelections","arr","count","emptyTableFill","period","output","Array","calculateTable","message","cols","Math","floor","charAt","bigrams","Map","idx","bigram","has","set","get","bigramStat","key","actProb","charCodeAt","log10","invalidKey","vals","parseInt","decrypt","array","encryptArray","char","shift","encrypt","toNGram","n","App","state","home","val","this","setState","toUpperCase","processMessage","processKey","newKey","updateKey","updateValidKey","newTableFill","temp","k","updateHome","updatePeriod","event","updateMessage","target","alert","newMessage","random","nums","keyLen","a","shuffle","graph","colEmpty","stack","front","pop","getKeyFromGraph","invertKey","updateTableSelection","newGraph","visited","frontier","includes","recentlyVisited","containsCycle","updateTableSelectionTrue","width","handleToHome","Grommet","full","Main","renderPage","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"gYAqBMA,G,MAAkB,CAAC,CAAC,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,KAAK,IAAI,KAAK,EAAE,IAAI,EAAE,KAAK,KAAK,KAAK,IAAI,IAAI,GAAG,GAAG,IAAI,IAChG,CAAC,IAAI,GAAG,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,GAAG,EAAE,KAAK,GAAG,EAAE,IAAI,EAAE,EAAE,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,EAAE,KAAK,GAC9E,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,KAAK,IAAI,EAAE,IAAI,IAAI,GAAG,GAAG,KAAK,EAAE,EAAE,IAAI,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,GAAG,GACjF,CAAC,KAAK,GAAG,GAAG,IAAI,KAAK,EAAE,IAAI,EAAE,KAAK,GAAG,EAAE,IAAI,IAAI,GAAG,IAAI,EAAE,EAAE,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,EAAE,IAAI,GACrF,CAAC,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE,GAAG,IAAI,IAAI,KAAK,GAAG,IAAI,GAAG,KAAK,KAAK,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,GACjG,CAAC,IAAI,EAAE,EAAE,EAAE,KAAK,IAAI,EAAE,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,EAAE,KAAK,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,GAAG,GAC3E,CAAC,KAAK,EAAE,EAAE,GAAG,KAAK,EAAE,IAAI,KAAK,IAAI,EAAE,EAAE,IAAI,GAAG,IAAI,KAAK,EAAE,EAAE,KAAK,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE,GAAG,GACnF,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,GAAG,GAAG,GAAG,IAAI,EAAE,EAAE,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,GAC1E,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI,IAAI,KAAK,IAAI,IAAI,EAAE,IAAI,KAAK,KAAK,GAAG,IAAI,EAAE,GAAG,EAAE,IACzF,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,GAClE,CAAC,IAAI,GAAG,EAAE,GAAG,KAAK,GAAG,EAAE,IAAI,KAAK,EAAE,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,EAAE,GAAG,KAAK,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,GACjF,CAAC,KAAK,GAAG,GAAG,IAAI,KAAK,IAAI,IAAI,EAAE,KAAK,EAAE,GAAG,KAAK,GAAG,EAAE,IAAI,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG,GAAG,EAAE,IAAI,GACvF,CAAC,KAAK,IAAI,GAAG,EAAE,KAAK,GAAG,EAAE,EAAE,KAAK,EAAE,EAAE,GAAG,IAAI,GAAG,KAAK,IAAI,EAAE,GAAG,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,GAChF,CAAC,IAAI,EAAE,IAAI,KAAK,KAAK,IAAI,KAAK,GAAG,IAAI,EAAE,GAAG,GAAG,IAAI,IAAI,IAAI,EAAE,EAAE,GAAG,IAAI,KAAK,IAAI,GAAG,GAAG,EAAE,IAAI,GACzF,CAAC,GAAG,IAAI,IAAI,IAAI,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAC7F,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI,GAAG,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE,GAAG,GAC/E,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAM,EAAE,EAAE,EAAE,EAAE,GACvD,CAAC,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,IAAI,GAAG,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI,KAAK,GAAG,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,EAAE,IAAI,GAC9F,CAAC,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG,EAAE,IAAI,KAAK,EAAE,GAAG,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG,IAAI,KAAK,IAAI,EAAE,GAAG,EAAE,GAAG,GACtF,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,KAAK,KAAK,EAAE,EAAE,IAAI,GAAG,GAAG,KAAK,EAAE,EAAE,IAAI,IAAI,IAAI,IAAI,EAAE,GAAG,EAAE,IAAI,GACjF,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE,GAAG,KAAK,IAAI,KAAK,GAAG,IAAI,EAAE,KAAK,KAAK,KAAK,GAAG,GAAG,EAAE,GAAG,GAAG,GAC5F,CAAC,IAAI,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GACnE,CAAC,KAAK,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,KAAK,KAAK,EAAE,EAAE,GAAG,EAAE,IAAI,KAAK,EAAE,EAAE,IAAI,IAAI,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAC5E,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,GACzE,CAAC,IAAI,GAAG,IAAI,GAAG,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,IAAI,KAAK,IAAI,EAAE,IAAI,KAAK,IAAI,IAAI,EAAE,IAAI,EAAE,GAAG,IACtF,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,OAIrFC,EAAmB,CAAC,q6BACA,89BACA,+tBACA,wuBACA,0gCAWpBC,EAAQ,CACZC,OAAQ,CACNC,OAAQ,CACNC,MAAO,WAETC,KAAM,CACJC,OAAQ,cACRC,KAAM,OACNC,OAAQ,UAwBd,SAASC,EAAWC,EAAMC,EAASC,GAEjC,IADA,IAAIC,EAAO,GAD4B,WAE/BC,GAEN,IADA,IAAIC,EAAK,GAH4B,WAI7BC,GACND,EAAIE,KACF,kBAACC,EAAA,EAAD,CAAWC,MAAM,MAAMC,cAAc,SAASC,OAAO,MAAMC,IAAI,QAlBvE,SAAwBZ,EAAMC,GAAwB,IAAfC,EAAc,wDACnD,OACE,kBAACW,EAAA,EAAD,CACEZ,QAASA,EACTa,gBAAgB,EAChBC,WAAYb,EAAO,UAAW,IAE9B,kBAACc,EAAA,EAAD,CAAMC,UAAU,UAAUjB,IAYrBkB,CAAelB,EAAKI,GAAGE,IAAI,kBAAIL,EAAQG,EAAGE,KAAIJ,EAAKE,GAAGE,OAHrDA,EAAI,EAAGA,EAAIN,EAAKI,GAAGe,OAAQb,IAAM,EAAjCA,GAORH,EAAKI,KACH,kBAACa,EAAA,EAAD,KACGf,KAXCD,EAAI,EAAGA,EAAIJ,EAAKmB,OAAQf,IAAM,EAA9BA,GAgBR,OACE,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGnB,IAQT,SAASoB,EAASC,GAChB,OACE,kBAACC,EAAA,EAAD,CACEC,MAAO,CACL,CAAEC,KAAM,OAAQC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IACxC,CAAEF,KAAM,MAAOC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IACvC,CAAEF,KAAM,UAAWC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IAC3C,CAAEF,KAAM,UAAWC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IAC3C,CAAEF,KAAM,QAASC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IACzC,CAAEF,KAAM,SAAUC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IAC1C,CAAEF,KAAM,SAAUC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,KAE5CC,QAAS,CAAC,OAAQ,OAAQ,OAAQ,QAClCC,KAAM,CAAC,SAAU,UAAW,WAC5BC,IAAI,QACJC,OAAO,UAEP,kBAACpB,EAAA,EAAD,CAAKqB,SAAS,QACb,kBAACC,EAAA,EAAD,CACGC,SAAYZ,EAAMa,kBAClBC,MAASd,EAAMe,eACfC,YAAY,uBACZC,QAAQ,EACRvC,MAAM,EACNyB,KAAK,YACLe,WAAW,QACXC,OAAO,KAGX,kBAAC9B,EAAA,EAAD,CAAKqB,SAAS,OACZ,kBAACU,EAAA,EAAD,CACER,SAAYZ,EAAMqB,cAClBP,MAASd,EAAMsB,WACfN,YAAY,mBACZE,WAAW,QACXC,OAAO,KAGX,kBAAC9B,EAAA,EAAD,CAAKqB,SAAS,WACZ,kBAACa,EAAA,EAAD,CACEC,MAAM,UACNnD,KAAK,QACLI,QAAWuB,EAAMyB,iBAGrB,kBAACpC,EAAA,EAAD,CAAKqB,SAAS,WACZ,kBAACa,EAAA,EAAD,CACEC,MAAM,UACNnD,KAAK,QACLI,QAASuB,EAAM0B,iBAGnB,kBAACrC,EAAA,EAAD,CAAKqB,SAAS,SACZ,kBAACa,EAAA,EAAD,CACEC,MAAM,QACNnD,KAAK,QACLI,QAASuB,EAAM2B,eAGnB,kBAACtC,EAAA,EAAD,CAAKqB,SAAS,UACZ,kBAACa,EAAA,EAAD,CACEC,MAAM,mBACNnD,KAAK,QACLI,QAASuB,EAAM4B,kBAGnB,kBAACvC,EAAA,EAAD,CAAKqB,SAAS,UACZ,kBAACa,EAAA,EAAD,CACEC,MAAM,oBACNnD,KAAK,QACLI,QAASuB,EAAM6B,mBAQzB,SAASC,EAAU9B,GACjB,OACE,kBAACC,EAAA,EAAD,CACEC,MAAO,CACL,CAAEC,KAAM,SAAUC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IAC1C,CAAEF,KAAM,cAAeC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IAC/C,CAAEF,KAAM,SAAUC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,IAC1C,CAAEF,KAAM,OAAQC,MAAO,CAAC,EAAG,GAAIC,IAAK,CAAC,EAAG,KAE1CC,QAAS,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,QAC1CC,KAAM,CAAC,SAAU,WACjBC,IAAI,QACJC,OAAO,UAEP,kBAACpB,EAAA,EAAD,CAAKqB,SAAS,SAASqB,aAAa,SAASC,QAAQ,UAClDzD,EAAWyB,EAAMxB,KAAMwB,EAAMiC,iBAAkBjC,EAAMkC,YAExD,kBAAC7C,EAAA,EAAD,CAAKqB,SAAS,cAAcqB,aAAa,SAASC,QAAQ,eACvDG,GAEH,kBAAC9C,EAAA,EAAD,CACEqB,SAAS,SACT0B,UAAU,MACVC,MAAM,WACNN,aAAa,SACbtC,UAAU,WAEV,kBAACD,EAAA,EAAD,gBACA,kBAAC+B,EAAA,EAAD,CACEe,KAAM,kBAACC,EAAA,EAAD,CAAUlE,KAAK,UACrBA,KAAK,QACLI,QAASuB,EAAMwC,oBAEjB,kBAACjB,EAAA,EAAD,CACEe,KAAM,kBAACG,EAAA,EAAD,CAAKpE,KAAK,UAChBA,KAAK,QACLI,QAASuB,EAAM0C,oBAGnB,kBAACrD,EAAA,EAAD,CACEqB,SAAS,OACT0B,UAAU,MACVC,MAAM,WACNN,aAAa,SACbtC,UAAU,WAEV,kBAAC8B,EAAA,EAAD,CACEC,MAAOxB,EAAM2C,SAAW,UAAY,OACpCtE,KAAK,QACLI,QAASuB,EAAM4C,eAoSzB,SAASC,EAAgBC,GAEvB,IADA,IAAIC,EAAQ,EACJnE,EAAI,EAAGA,EAAIkE,EAAInD,OAAQf,IAC7B,IAAI,IAAIE,EAAI,EAAGA,EAAIgE,EAAIlE,GAAGe,OAAQb,IAC7BgE,EAAIlE,GAAGE,IACRiE,IAIN,OAAOA,EAoDT,SAASC,EAAeC,GAEtB,IADA,IAAIC,EAASC,MAAMF,GACXrE,EAAI,EAAGA,EAAIqE,EAAQrE,IACzBsE,EAAOtE,GAAKuE,MAAMF,GAAQvE,MAAK,GAEjC,OAAOwE,EAQT,SAASE,EAAeH,EAAQI,GAE9B,IADA,IAAIH,EAASC,MAAMF,GACXrE,EAAI,EAAGA,EAAIqE,EAAQrE,IACzBsE,EAAOtE,GAAKuE,MAAMF,GAAQvE,KAAK,GAIjC,IADA,IAAI4E,EAAOH,MAAMF,GACTrE,EAAI,EAAGA,EAAIqE,EAAQrE,IACzB0E,EAAK1E,GAAK,GAEZ,IAAI,IAAIA,EAAI,EAAGA,EAAI2E,KAAKC,MAAMH,EAAQ1D,OAAOsD,GAAUA,EAAQrE,IAC7D0E,EAAK1E,EAAEqE,GAAQlE,KAAKsE,EAAQI,OAAO7E,IAGrC,IAAI,IAAIA,EAAI,EAAGA,EAAIqE,EAAQrE,IACzB,IAAI,IAAIE,EAAI,EAAGA,EAAImE,EAAQnE,IACzB,GAAGF,IAAME,EAAT,CAKA,IAFA,IAAI4E,EAAU,IAAIC,IAEVC,EAAM,EAAGA,EAAMN,EAAK1E,GAAGe,OAAQiE,IAAO,CAC5C,IAAIC,EAASP,EAAK1E,GAAGgF,GAAON,EAAKxE,GAAG8E,GACpB,EACbF,EAAQI,IAAID,GACXH,EAAQK,IAAIF,EAAQH,EAAQM,IAAIH,GAAU,GAE1CH,EAAQK,IAAIF,EAAQ,GAI1B,IAhB8B,EAgB1BI,EAAa,EAhBa,cAiBJP,GAjBI,IAiB9B,IAAI,EAAJ,qBAAmC,CAAC,IAAD,yBAAxBQ,EAAwB,KAE7BC,EAF6B,KAIjCF,GADcpG,EAAgBqG,EAAIE,WAAW,GAtlBtC,IAslBkDF,EAAIE,WAAW,GAtlBjE,IARe,IA+lBEb,KAAKc,MAAMF,EAAU,IArBjB,8BAwB9BjB,EAAOtE,GAAGE,GAAKyE,KAAKC,MAAMS,GAI9B,OAAOf,EAOT,SAASoB,EAAWJ,GAClB,GAAGA,EAAIvE,OAjmBW,EAkmBhB,OAAO,EAGT,IADA,IAAI4E,EAAOpB,MApmBO,GAqmBTvE,EAAI,EAAGA,EAAIsF,EAAIvE,OAAQf,IAC9B2F,EAAKC,SAASN,EAAIT,OAAO7E,IAAI,IAAK,EAEpC,IAAK,IAAIA,EAAI,EAAGA,EAAIsF,EAAIvE,OAAQf,IAC9B,IAAI2F,EAAK3F,GACP,OAAO,EAGX,OAAO,EAQT,SAAS6F,EAAQpB,EAASa,GAGxB,IAFA,IAAMjB,EAASiB,EAAIvE,OACf+E,EAAQvB,MAAMF,GACVrE,EAAI,EAAGA,EAAIqE,EAAQrE,IACzB8F,EAAM9F,GAAK,GAEb,IAAI,IAAIA,EAAI,EAAGA,EAAIyE,EAAQ1D,OAAQf,IACjC8F,EAAM9F,EAAEqE,GAAQlE,KAAKsE,EAAQI,OAAO7E,IAGtC,IADA,IAAI+F,EAAexB,MAAMF,GACjBrE,EAAI,EAAGA,EAAIsF,EAAIvE,OAAQf,IAC7B+F,EAAaH,SAASN,EAAIT,OAAO7E,IAAM,GAAK8F,EAAM9F,GAGpD,IADA,IAAIsE,EAAS,GACLtE,EAAI,EAAGA,EAAIyE,EAAQ1D,OAASsD,EAAQrE,IAAK,CAC/C,IAAIgG,GACDA,EAAOD,EAAa/F,EAAEqE,GAAQ4B,WAC/B3B,GAAU0B,GAGd,OAAO1B,EAQT,SAAS4B,EAAQzB,EAASa,GAGxB,IAFA,IAAMjB,EAASiB,EAAIvE,OACf+E,EAAQvB,MAAMF,GACVrE,EAAI,EAAGA,EAAIqE,EAAQrE,IACzB8F,EAAM9F,GAAK,GAEb,IAAI,IAAIA,EAAI,EAAGA,EAAIyE,EAAQ1D,OAAQf,IACjC8F,EAAM9F,EAAEqE,GAAQlE,KAAKsE,EAAQI,OAAO7E,IAGtC,IADA,IAAI+F,EAAe,GACX/F,EAAI,EAAGA,EAAIsF,EAAIvE,OAAQf,IAC7B+F,EAAa5F,KAAK2F,EAAMF,SAASN,EAAIT,OAAO7E,IAAM,IAGpD,IADA,IAAIsE,EAAS,GACLtE,EAAI,EAAGA,EAAIyE,EAAQ1D,OAASsD,EAAQrE,IAAK,CAC/C,IAAIgG,GACDA,EAAOD,EAAa/F,EAAEqE,GAAQ4B,WAC/B3B,GAAU0B,GAGd,OAAO1B,EA6CT,SAAS6B,EAAQ1B,EAAS2B,GAExB,IADA,IAAI9B,EAAS,GACLtE,EAAI,EAAGA,EAAIyE,EAAQ1D,OAAQf,IACjCsE,GAAUG,EAAQI,OAAO7E,GAEpBA,EAAIoG,IAAQA,EAAI,IACnB9B,GAttBQ,KAytBZ,OAAOA,EAgBM+B,M,kDAniBb,WAAYjF,GAAQ,IAAD,8BACjB,cAAMA,IAEDkF,MAAQ,CACXC,MAAM,EACN9B,QAAS,GACTtC,eAAgB,GAChBmD,IAAK,GACL5C,WAAY,GACZ2B,OAAQ,GACRzE,KAAK,GACL0D,UAAU,GACVS,UAAS,GAZM,E,2DAkBJyC,GACbC,KAAKC,SAAS,CACZ3C,SAASyC,M,iCAIFA,GACTC,KAAKC,SAAS,CACZH,KAAKC,M,oCAIKA,GACZA,EAwdJ,SAAwB/B,GACtB,IAAIH,EAAS,GACbG,EAAUA,EAAQkC,cAClB,IAAI,IAAI3G,EAAI,EAAGA,EAAIyE,EAAQ1D,OAAQf,IAAK,CAEtC,IAAIgG,EAAOvB,EAAQe,WAAWxF,GAzsBnB,IA0sBGgG,GAAQA,GAzsBX,KA0sBT1B,GAAUG,EAAQI,OAAO7E,IAG7B,OAAOsE,EAleCsC,CAAeJ,GACrBC,KAAKC,SAAS,CACZjC,QAAQ+B,EACRrE,eAAegE,EAAQK,EA3OV,O,gCA+OPA,GACRA,EA+bJ,SAAoB/B,GAElB,IADA,IAAIH,EAAS,GACLtE,EAAI,EAAGA,EAAIyE,EAAQ1D,OAAQf,IAAK,CAEtC,IAAIgG,EAAOvB,EAAQe,WAAWxF,GArrBjB,IAsrBGgG,GAAQA,GArrBV,KAsrBZ1B,GAAUG,EAAQI,OAAO7E,IAG7B,OAAOsE,EAxcCuC,CAAWL,GACjBC,KAAKC,SAAS,CACZpB,IAAIkB,EACJ9D,WAAW8D,M,mCAIFA,GACX,GAtPgB,GAsPGA,GAAOA,GAvPV,EAuP8B,CAE5C,IADA,IAAIM,EAAS,GACL9G,EAAI,EAAGA,GAAKwG,EAAKxG,IACvB8G,GAAU9G,EAEZyG,KAAKM,UAAUD,GACfL,KAAKO,gBAAe,GACpBP,KAAKC,SAAS,CACZrC,OAAOmC,EACP5G,KAAK4E,EAAegC,EAAKC,KAAKH,MAAM7B,SACpCnB,UAAUc,EAAeoC,Q,2CAKVxG,EAAGE,EAAGsG,GACzB,IAAIS,EAAeR,KAAKH,MAAMhD,UAC9B2D,EAAajH,GAAGE,GAAKsG,EACrB,IAAIU,EAAOjD,EAAgBgD,IAAkBR,KAAKH,MAAMhB,IAAIvE,OAAS,EACrE0F,KAAKO,eAAeE,GAEpBT,KAAKC,SAAS,CACZpD,UAAU2D,M,+CAIWjH,EAAGE,GAE1B,IADA,IAAI+G,EAAeR,KAAKH,MAAMhD,UACtB6D,EAAI,EAAGA,EAAIF,EAAalG,OAAQoG,IACtCF,EAAajH,GAAGmH,IAAK,EACrBF,EAAaE,GAAGjH,IAAK,EAEvB+G,EAAajH,GAAGE,IAAK,EACrBuG,KAAKO,eAAe/C,EAAgBgD,IAAkBR,KAAKH,MAAMhB,IAAIvE,OAAS,GAC9E0F,KAAKC,SAAS,CACZpD,UAAU2D,M,oCAOZR,KAAKW,YAAYX,KAAKH,MAAMC,MAC5BE,KAAKY,aAjSW,GAkShBZ,KAAKO,gBAAe,K,wCAIHM,GACjBb,KAAKc,cAAcD,EAAME,OAAOtF,S,oCAGnBoF,GACbb,KAAKM,UAAUO,EAAME,OAAOtF,S,sCAIxBuE,KAAKH,MAAMhB,MAGZI,EAAWe,KAAKH,MAAMhB,KACvBmC,MAAM,mJAIRhB,KAAKc,cAAcrB,EAAQO,KAAKH,MAAM7B,QAASgC,KAAKH,MAAMhB,S,sCAItDmB,KAAKH,MAAMhB,MAGZI,EAAWe,KAAKH,MAAMhB,KACvBmC,MAAM,mJAIRhB,KAAKc,cAAc1B,EAAQY,KAAKH,MAAM7B,QAASgC,KAAKH,MAAMhB,S,uCAK1D,IADA,IAAIoC,EAAaxI,EAAiByF,KAAKC,MAAMD,KAAKgD,SAAWzI,EAAiB6B,SACvE2G,IAAejB,KAAKH,MAAM7B,SAC/BiD,EAAaxI,EAAiByF,KAAKC,MAAMD,KAAKgD,SAAWzI,EAAiB6B,SAE5E0F,KAAKc,cAAcG,GACnBjB,KAAKM,UAAU,M,uCAKf,IADA,IAAIW,EAAaxI,EAAiByF,KAAKC,MAAMD,KAAKgD,SAAWzI,EAAiB6B,SACvE2G,IAAejB,KAAKH,MAAM7B,SAC/BiD,EAAaxI,EAAiByF,KAAKC,MAAMD,KAAKgD,SAAWzI,EAAiB6B,SAK5E,IAHA,IAAIuE,EAAM,GACNsC,EAAO,GACPC,EAASlD,KAAKC,MAAM,EAAAD,KAAKgD,UAAgC,EACpD3H,EAAI,EAAGA,GAAK6H,EAAQ7H,IAC3B4H,EAAKzH,KAAKH,GAEZ4H,EAwYJ,SAAiBE,GACb,IAAK,IAAI9H,EAAI8H,EAAE/G,OAAS,EAAGf,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIyE,KAAKC,MAAMD,KAAKgD,UAAY3H,EAAI,IADP,EAEpB,CAAC8H,EAAE5H,GAAI4H,EAAE9H,IAAvB8H,EAAE9H,GAFgC,KAE5B8H,EAAE5H,GAF0B,KAIvC,OAAO4H,EA7YAC,CAAQH,GACf,IAAK,IAAI5H,EAAI,EAAGA,EAAI6H,EAAQ7H,IAC1BsF,GAAO,GAAKsC,EAAK5H,GAEnB0H,EAAaxB,EAAQwB,EAAYpC,GACjCmB,KAAKc,cAAcG,GACnBjB,KAAKM,UAAU,M,qCAMf,GAAGN,KAAKH,MAAMvC,SAAU,CACpB,IAAI+C,EAwFZ,SAAyBkB,GAEvB,IADA,IAAIxG,GAAS,EACLtB,EAAI,EAAGA,EAAI8H,EAAMjH,OAAQb,IAAK,CAEpC,IADA,IAAI+H,GAAW,EACPjI,EAAI,EAAGA,EAAIgI,EAAMjH,OAAQf,IAC/B,GAAGgI,EAAMhI,GAAGE,GAAI,CACd+H,GAAW,EACX,MAGJ,GAAGA,EAAU,CACXzG,EAAQtB,EACR,OAIJ,IAAIoF,EAAM,GACN4C,EAAQ,GACZA,EAAM/H,KAAKqB,GACX,KAAM0G,EAAMnH,OAAS,GAAG,CACtB,IAAIoH,EAAQD,EAAME,MAClB9C,GAAQ6C,EAAQ,EAChB,IAAI,IAAIjI,EAAI,EAAGA,EAAI8H,EAAMjH,OAAQb,IAC5B8H,EAAMG,GAAOjI,IACdgI,EAAM/H,KAAKD,GAKjB,OAAOoF,EArHY+C,CAAgB5B,KAAKH,MAAMhD,WACxCwD,EA2IR,SAAmBxB,GAEjB,IADA,IAAIwB,EAAS,GACL9G,EAAI,EAAGA,GAAKsF,EAAIvE,OAAQf,IAC9B8G,GAAU9G,EAGZ,OADA8G,EAASjB,EAAQiB,EAAQxB,GAhJVgD,CAAUxB,GACnBL,KAAKM,UAAUD,GACfL,KAAKc,cAAc1B,EAAQY,KAAKH,MAAM7B,QAASqC,SAE/CL,KAAKM,UAAU,IAEnBN,KAAKW,YAAYX,KAAKH,MAAMC,Q,uCAGbvG,EAAGE,GAElB,GAAGuG,KAAKH,MAAMhD,UAAUtD,GAAGE,GACzBuG,KAAK8B,qBAAqBvI,EAAGE,GAAG,OADlC,CAKA,IADA,IAAIsI,EAAWjE,MAAMkC,KAAKH,MAAMhD,UAAUvC,QACjCoG,EAAI,EAAGA,EAAIqB,EAASzH,OAAQoG,IACnCqB,EAASrB,GAAT,YAAkBV,KAAKH,MAAMhD,UAAU6D,IAEzC,IAAI,IAAIA,EAAI,EAAGA,EAAIqB,EAASzH,OAAQoG,IAClCqB,EAASxI,GAAGmH,IAAK,EACjBqB,EAASrB,GAAGjH,IAAK,EAEnBsI,EAASxI,GAAGE,IAAK,EAiIrB,SAAuB8H,GACrB,IAAIS,EAAUlE,MAAMyD,EAAMjH,QAAQjB,MAAK,GACnC4I,EAAWnE,QACf,KAAOkE,EAAQE,UAAS,IAAS,CAC/B,IAAI,IAAI3I,EAAI,EAAGA,EAAIyI,EAAQ1H,OAAQf,IACjC,IAAIyI,EAAQzI,GAAI,CACd0I,EAASvI,KAAKH,GACd,MAIJ,IADA,IAAI4I,EAAkBrE,MAAMyD,EAAMjH,QAAQjB,MAAK,GACzC4I,EAAS3H,OAAS,GAAG,CACzB,IAAMoH,EAAQO,EAASN,MACvBK,EAAQN,IAAS,EACjBS,EAAgBT,IAAS,EACzB,IAAK,IAAInI,EAAI,EAAGA,EAAIyI,EAAQ1H,OAAQf,IAClC,GAAGgI,EAAMG,GAAOnI,GAAG,CACjB,GAAG4I,EAAgB5I,GACjB,OAAO,EAET0I,EAASvI,KAAKH,KAKtB,OAAO,EAzJF6I,CAAcL,IAGjB/B,KAAKqC,yBAAyB9I,EAAEE,M,yCAIhCuG,KAAKY,aAAaZ,KAAKH,MAAMjC,OAAS,K,0CAItCoC,KAAKY,aAAaZ,KAAKH,MAAMjC,OAAS,K,mCAK1B,IAAD,OACX,OAAGoC,KAAKH,MAAMC,KAER,kBAAC9F,EAAA,EAAD,CAAKsI,MAAM,QAAQlI,UAAU,UAC3B,kBAACM,EAAD,CACE4B,YAAa,kBAAM,EAAKA,eACxBd,kBAAmB,SAAAqF,GAAK,OAAI,EAAKrF,kBAAkBqF,IACnDnF,eAAgBsE,KAAKH,MAAMnE,eAC3BU,cAAe,kBAAM,EAAKA,iBAC1BC,cAAe,kBAAM,EAAKA,iBAC1BL,cAAe,SAAA6E,GAAK,OAAI,EAAK7E,cAAc6E,IAC3C5E,WAAY+D,KAAKH,MAAM5D,WACvBM,eAAgB,kBAAM,EAAKA,kBAC3BC,eAAgB,kBAAM,EAAKA,qBAO/B,kBAACxC,EAAA,EAAD,CAAKsI,MAAM,QAAQlI,UAAU,UAC3B,kBAACqC,EAAD,CACEtD,KAAM6G,KAAKH,MAAM1G,KACjByD,iBAAkB,SAACrD,EAAEE,GAAH,OAAO,EAAKmD,iBAAiBrD,EAAEE,IACjDoD,UAAWmD,KAAKH,MAAMhD,UACtBQ,iBAAkB,kBAAM,EAAKA,oBAC7BF,kBAAmB,kBAAM,EAAKA,qBAC9BG,SAAU0C,KAAKH,MAAMvC,SACrBC,WAAY,kBAAM,EAAKgF,qB,+BASjC,OACE,kBAACC,EAAA,EAAD,CAAS9J,MAAOA,EAAO+J,MAAI,GACzB,kBAACC,EAAA,EAAD,KACG1C,KAAK2C,mB,GAlPEC,IAAMC,WCxPJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM/F,c","file":"static/js/main.7d0e9267.chunk.js","sourcesContent":["import React from 'react';\nimport { \n  Box, \n  Button,\n  Grid,\n  Grommet,\n  Main,\n  Text,\n  TextArea,\n  TextInput,\n  Table,\n  TableRow,\n  TableCell,\n  TableBody,\n} from 'grommet';\nimport {\n  Add,\n  Subtract,\n} from 'grommet-icons'\nimport { act } from 'react-dom/test-utils';\n\nconst ENGLISH_BIGRAMS = [[11,193,388,469,20,100,233,20,480,20,103,1052,281,1878,8,222,0,1180,1001,1574,137,212,57,26,312,23],\n                         [932,57,16,8,3220,0,0,0,605,57,0,1243,49,0,965,0,0,662,229,49,727,16,0,0,1165,0],\n                         [1202,0,196,4,1707,0,0,1277,761,0,324,369,15,11,2283,0,4,426,87,893,347,0,0,0,94,0],\n                         [1044,20,26,218,3778,7,132,7,1803,33,0,125,178,53,733,0,7,324,495,13,601,99,40,0,264,0],\n                         [660,36,433,1195,438,142,125,21,158,5,36,456,340,1382,40,192,34,1927,1231,404,48,215,205,152,121,4],\n                         [838,0,0,0,1283,924,0,0,1608,0,0,299,9,9,2788,0,0,1215,26,496,462,0,0,0,43,0],\n                         [1078,0,0,18,2393,0,177,1281,839,0,0,203,27,451,1140,0,0,1325,256,247,512,0,0,0,53,0],\n                         [1770,5,14,8,5624,0,0,5,1168,0,0,16,16,38,786,0,0,153,27,233,85,0,11,0,41,0],\n                         [380,82,767,459,437,129,280,2,16,0,50,567,297,2497,893,100,8,342,1194,1135,11,250,0,23,2,79],\n                         [1259,0,0,0,1818,0,0,0,350,0,0,0,0,0,3147,0,0,70,0,0,3356,0,0,0,0,0],\n                         [395,28,0,28,5283,28,0,198,1582,0,113,198,28,565,198,0,0,85,1102,28,28,0,0,0,113,0],\n                         [1342,19,22,736,1918,105,108,0,1521,0,79,1413,82,4,778,41,0,34,389,254,269,56,11,0,819,0],\n                         [1823,337,26,0,2976,10,0,0,1345,0,0,10,654,42,1246,722,0,26,244,5,337,5,0,0,192,0],\n                         [550,4,621,1681,1212,102,1391,13,665,9,66,73,104,194,528,4,7,11,751,1641,124,68,18,2,157,4],\n                         [85,101,162,231,37,1299,82,25,92,14,78,416,706,2191,222,292,0,1531,357,396,947,334,345,12,41,4],\n                         [1358,0,6,0,1747,0,0,237,423,0,0,812,73,6,1511,581,0,2305,180,287,457,0,0,0,17,0],\n                         [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10000,0,0,0,0,0],\n                         [1026,33,172,282,2795,31,175,17,1181,0,205,164,303,325,1114,55,0,212,655,596,192,142,17,2,306,0],\n                         [604,12,284,27,1795,24,0,561,1177,0,91,145,112,21,706,386,9,27,836,2484,579,0,39,0,81,0],\n                         [619,3,36,2,1417,7,2,3511,1406,0,0,101,44,15,1228,3,0,479,418,213,195,5,88,0,203,5],\n                         [344,415,491,243,434,52,382,10,258,0,14,1097,329,1518,19,386,0,1460,1221,1255,29,14,0,10,14,5],\n                         [749,0,0,23,6013,0,0,0,2568,0,0,0,12,0,530,0,0,0,23,0,12,12,0,0,58,0],\n                         [2290,8,0,32,1942,0,0,1422,2104,0,0,41,0,357,1292,0,0,106,366,16,0,0,0,0,24,0],\n                         [672,0,1119,0,1269,0,0,75,1119,0,0,0,75,0,75,3507,0,0,0,1716,0,0,0,373,0,0],\n                         [586,34,103,69,2898,0,0,0,691,0,34,172,379,172,2208,310,0,310,1518,172,138,0,103,0,69,34],\n                         [2278,0,0,0,4557,0,0,0,2152,0,0,127,0,0,506,0,0,0,0,0,127,0,0,0,0,253]];\n\nconst ENGLISH_BIGRAMS_TOTAL = 1000.0;\n\nconstn                          'THEMOSTNOTICEABLEEFFECTTHISCOMMUNICATIONHASONTHEGAMEISTHEDELAYINMOVINGSUPPOSEAPLAYERTYPESAMOVEFORHISSHIPANDHITSRETURNWHATHAPPENSTHENTHEPLAYERPROCESSSAVESUPMESSAGESTOBEWRITTENTOTHETEMPORARYFILEINABUFFEREVERYSEVENSECONDSORSOTHEPLAYERPROCESSGETSEXCLUSIVEACCESSTOTHETEMPORARYFILEANDWRITESOUTITSBUFFERTOTHEFILETHEDRIVERRUNNINGASYNCHRONOUSLYMUSTREADINTHEMOVEMENTCOMMANDPROCESSITANDWRITEOUTTHERESULTSTHISTAKESTWOEXCLUSIVEACCESSESTOTHETEMPORARYFILEFINALLYWHENTHEPLAYERPROCESSGETSAROUNDTODOINGANOTHERSEVENSECONDUPDATETHERESULTSOFTHEMOVEAREDISPLAYEDONTHESCREENHENCEEVERYMOVEMENTREQUIRESFOUREXCLUSIVEACCESSESTOTHETEMPORARYFILEANYWHEREFROMSEVENTOTWENTYONESECONDSDEPENDINGUPONASYNCHRONYBEFORETHEPLAYERSEESTHERESULTSOFHISMOVESAFTERTHEPLAYERWRITESOUTAFIRSTMOVEMENTMESSAGEASECONDMOVEMENTCOMMANDCANTHENBEISSUEDTHEFIRSTMESSAGEWILLBEINTHETEMPORARYFILEWAITINGFORTHEDRIVERANDTHESECONDWILLBEINTHEFILEBUFFERWAITINGTOBEWRITTENTOTHEFILETHUSBYALWAYSTYPINGMOVESATURNAHEADOFTHETIMETHEPLAYERCANSAILAROUNDQUITEQUICKLY',\n                          'IFYOUHAVENEVERPLAYEDSOLITAIREBEFOREITISRECOMMENDEDTHATYOUCONSULTASOLITAIREINSTRUCTIONBOOKINCANFIELDTABLEAUCARDSMAYBEBUILTONEACHOTHERDOWNWARDINALTERNATECOLORSANENTIREPILEMUSTBEMOVEDASAUNITINBUILDINGTOPCARDSOFTHEPILESAREAVAILABLETOBEPLAYEDONFOUNDATIONSBUTNEVERINTOEMPTYSPACESSPACESMUSTBEFILLEDFROMTHESTOCKTHETOPCARDOFTHESTOCKALSOISAVAILABLETOBEPLAYEDONFOUNDATIONSORBUILTONTABLEAUPILESAFTERTHESTOCKISEXHAUSTEDTABLEAUSPACESMAYBEFILLEDFROMTHETALONANDTHEPLAYERMAYKEEPTHEMOPENUNTILHEWISHESTOUSETHEMCARDSAREDEALTFROMTHEHANDTOTHETALONBYTHREESANDTHISREPEATSUNTILTHEREARENOMORECARDSINTHEHANDORTHEPLAYERQUITSTOHAVECARDSDEALTONTOTHETALONTHEPLAYERTYPESHTFORHISMOVEFOUNDATIONBASECARDSAREALSOAUTOMATICALLYMOVEDTOTHEFOUNDATIONWHENTHEYBECOMEAVAILABLE',\n                          'ROBOTSPITSYOUAGAINSTEVILROBOTSWHOARETRYINGTOKILLYOUWHICHISWHYTHEYAREEVILFORTUNATELYFORYOUEVENTHOUGHTHEYAREEVILTHEYARENOTVERYBRIGHTANDHAVEAHABITOFBUMPINGINTOEACHOTHERTHUSDESTROYINGTHEMSELVESINORDERTOSURVIVEYOUMUSTGETTHEMTOKILLEACHOTHEROFFSINCEYOUHAVENOOFFENSIVEWEAPONRYSINCEYOUARESTUCKWITHOUTOFFENSIVEWEAPONRYYOUAREENDOWEDWITHONEPIECEOFDEFENSIVEWEAPONRYATELEPORTATIONDEVICEWHENTWOROBOTSRUNINTOEACHOTHERORAJUNKPILETHEYDIEIFAROBOTRUNSINTOYOUYOUDIEWHENAROBOTDIESYOUGETTENPOINTSANDWHENALLTHEROBOTSDIEYOUSTARTONTHENEXTFIELDTHISKEEPSUPUNTILTHEYFINALLYGETYOUONLYFIVESCORESAREALLOWEDPERUSERONTHESCOREFILEIFYOUMAKEITINTOTHESCOREFILEYOUWILLBESHOWNTHELISTATTHEENDOFTHEGAMEIFANALTERNATESCOREFILEISSPECIFIEDTHATWILLBEUSEDINSTEADOFTHESTANDARDFILEFORSCORESY',\n                          'ATTHESTARTOFTHEFIRSTGAMETHEPROGRAMASKSTHEPLAYERTOCUTTHEDECKTODETERMINEWHOGETSTHEFIRSTCRIBTHEUSERSHOULDRESPONDWITHANUMBERBETWEENZEROANDFIFTYONEINDICATINGHOWMANYCARDSDOWNTHEDECKISTOBECUTTHEPLAYERWHOCUTSTHELOWERRANKEDCARDGETSTHEFIRSTCRIBIFMORETHANONEGAMEISPLAYEDTHELOSEROFTHEPREVIOUSGAMEGETSTHEFIRSTCRIBINTHECURRENTGAMEFOREACHHANDTHEPROGRAMFIRSTPRINTSTHEPLAYERSHANDWHOSECRIBITISANDTHENASKSTHEPLAYERTODISCARDTWOCARDSINTOTHECRIBTHECARDSAREPROMPTEDFORONEPERLINEANDARETYPEDASEXPLAINEDBELOWAFTERCUTTINGTHEDECKPLAYSTARTSWITHTHENONDEALERTHEPERSONWHODOESNTHAVETHECRIBLEADINGTHEFIRSTCARDPLAYCONTINUESASPERCRIBBAGEUNTILALLCARDSAREEXHAUSTEDTHEPROGRAMKEEPSTRACKOFTHESCORINGOFALLPOINTSANDTHETOTALOFTHECARDSONTHETABLEAFTERPLAYTHEHANDSARESCOREDTHEPROGRAMREQUESTSTHEPLAYERTOSCOREHISHANDANDTHECRIBIFITISHISBYPRINTINGOUTTHEAPPROPRIATECARDSANDTHECUTCARDENCLOSEDINBRACKETSPLAYCONTINUESUNTILONEPLAYERREACHESTHEGAMELIMITACARRIAGERETURNWHENANUMERICINPUTISEXPECTEDISEQUIVALENTTOTYPINGTHELOWESTLEGALVALUEWHENCUTTINGTHEDECKTHISISEQUIVALENTTOCHOOSINGTHETOPCARD'];\n\nconst A_CODE = 65;\nconst Z_CODE = 90;\nconst ONE_CODE = 49;\nconst NINE_CODE = 57;\nconst NGRAM_SIZE = 5;\nconst MAX_KEY_LEN = 9;\nconst MIN_KEY_LEN = 2;\nconst SPACE = ' ';\n\nconst theme = {\n  global: {\n    colors: {\n      brand: '#228BE6',\n    },\n    font: {\n      family: 'Courier New',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\n/* ------------ flowchart --------- */\n\nfunction keyChart(size, fill) {\n}\n\n/* ------------ Display Table ------------- */\n\nfunction breakTableCell(data, onClick, fill = false) {\n  return (\n    <Box\n      onClick={onClick}\n      focusIndicator={false}\n      background={fill ? 'light-4': ''}\n    >\n      <Text alignSelf='center'>{data}</Text>\n    </Box>\n  );\n}\n\nfunction breakTable(data, onClick, fill) {\n  let body = [];\n  for(let i = 0; i < data.length; i++) {\n    let row =[]\n    for(let j = 0; j < data[i].length; j++) {\n      row.push(\n        <TableCell scope='row' verticalAlign='middle' border='all' pad='none'>\n          {breakTableCell(data[i][j], ()=>onClick(i, j), fill[i][j])}\n        </TableCell>\n      );\n    }\n    body.push(\n      <TableRow>\n        {row}\n      </TableRow>\n    );\n  }\n\n  return(\n    <Table>\n      <TableBody>\n        {body}\n      </TableBody>\n    </Table>\n  );\n}\n\n/* ------------- ---------*/\n\nfunction HomeGrid(props) { \n  return (\n    <Grid\n      areas={[\n        { name: 'text', start: [0, 0], end: [3, 0] },\n        { name: 'key', start: [0, 1], end: [1, 1] },\n        { name: 'encrypt', start: [2, 2], end: [2, 2] },\n        { name: 'decrypt', start: [3, 2], end: [3, 2] },\n        { name: 'break', start: [1, 2], end: [1, 2] },\n        { name: 'randPT', start: [2, 1], end: [2, 1] },\n        { name: 'randCT', start: [3, 1], end: [3, 1] },\n      ]}\n      columns={['auto', 'auto', 'auto', 'auto']}\n      rows={['medium', 'xxsmall', 'xxsmall']}\n      gap='small'\n      margin='xlarge'\n    >\n      <Box gridArea='text'> \n       <TextArea\n          onChange = {props.handleMessageEdit}\n          value = {props.displayMessage}\n          placeholder=\"Type message here...\"\n          resize={false}\n          fill={true}\n          name='TextInput'\n          spellCheck='false'\n          focus={false}\n        />\n      </Box>\n      <Box gridArea='key'>\n        <TextInput\n          onChange = {props.handleKeyEdit}\n          value = {props.displayKey}\n          placeholder='Type key here...'\n          spellCheck='false'\n          focus={false}\n        />\n      </Box>\n      <Box gridArea='encrypt'>\n        <Button\n          label='Encrypt'\n          size='small'\n          onClick = {props.handleEncrypt}\n        />\n      </Box>\n      <Box gridArea='decrypt'>\n        <Button\n          label='Decrypt'\n          size='small'\n          onClick={props.handleDecrypt}\n        />\n      </Box> \n      <Box gridArea='break'>\n        <Button\n          label='Break'\n          size='small'\n          onClick={props.handleBreak}\n        />\n      </Box>\n      <Box gridArea='randPT'>\n        <Button\n          label='Random Plaintext'\n          size='small'\n          onClick={props.handleRandomPT}\n        />\n      </Box>\n      <Box gridArea='randCT'>\n        <Button\n          label='Random Cyphertext'\n          size='small'\n          onClick={props.handleRandomCT}\n        />\n      </Box>\n    </Grid>\n  );\n}\n\n\nfunction BreakGrid(props) { \n  return (\n    <Grid\n      areas={[\n        { name: 'matrix', start: [0, 0], end: [2, 0] },\n        { name: 'permutation', start: [3, 0], end: [4, 0] },\n        { name: 'period', start: [1, 1], end: [1, 1] },\n        { name: 'back', start: [3, 1], end: [3, 1] },\n      ]}\n      columns={['auto', 'auto', 'auto', 'auto', 'auto']}\n      rows={['medium', 'xxsmall']}\n      gap='small'\n      margin='xlarge'\n    >\n      <Box gridArea='matrix' alignContent='center' justify='center'>\n        {breakTable(props.data, props.handleClickTable, props.tableFill)}\n      </Box>\n      <Box gridArea='permutation' alignContent='center' justify='center'> \n        {keyChart(0,0)}\n      </Box>\n      <Box\n        gridArea='period'\n        direction='row'\n        align='baseline'\n        alignContent='around'\n        alignSelf='stretch'\n      >\n        <Text>Period:</Text>\n        <Button\n          icon={<Subtract size='small' />}\n          size='small'\n          onClick={props.handlePeriodMinus}\n        />\n        <Button\n          icon={<Add size='small'/>}\n          size='small'\n          onClick={props.handlePeriodPlus}\n        />\n      </Box>\n      <Box \n        gridArea='back'\n        direction='row'\n        align='baseline'\n        alignContent='around'\n        alignSelf='stretch'\n      >\n        <Button\n          label={props.validKey ? 'Confirm' : 'Back'}\n          size='small'\n          onClick={props.handleBack}\n        />\n      </Box>\n    </Grid>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      home: true,\n      message: '',\n      displayMessage: '',\n      key: '',\n      displayKey: '',\n      period: '',\n      data:[],\n      tableFill:[],\n      validKey:false,\n    };\n  }\n\n  /* -------------- Change State -------------- */\n\n  updateValidKey(val) {\n    this.setState({\n      validKey:val,\n    });\n  }\n\n  updateHome(val) {\n    this.setState({\n      home:val,\n    });\n  }\n\n  updateMessage(val) {\n    val = processMessage(val);\n    this.setState({\n      message:val,\n      displayMessage:toNGram(val, NGRAM_SIZE),\n    });\n  }\n\n  updateKey(val) {\n    val = processKey(val);\n    this.setState({\n      key:val,\n      displayKey:val,\n    });\n  }\n  \n  updatePeriod(val) {\n    if( MIN_KEY_LEN <= val && val <= MAX_KEY_LEN) {\n      let newKey = '';\n      for(let i = 1; i <= val; i++) {\n        newKey += i;\n      }\n      this.updateKey(newKey);\n      this.updateValidKey(false);\n      this.setState({\n        period:val,\n        data:calculateTable(val, this.state.message),\n        tableFill:emptyTableFill(val),\n      });\n    }\n  }\n\n  updateTableSelection(i, j, val) {\n    let newTableFill = this.state.tableFill;\n    newTableFill[i][j] = val;\n    let temp = countSelections(newTableFill) >= (this.state.key.length - 1);\n    this.updateValidKey(temp);\n    //this.updateValidKey(countSelections(newTableFill) >= (this.state.key.length - 1))\n    this.setState({\n      tableFill:newTableFill,\n    });\n  }\n\n  updateTableSelectionTrue(i, j) {\n    let newTableFill = this.state.tableFill;\n    for(let k = 0; k < newTableFill.length; k++) {\n      newTableFill[i][k] = false;\n      newTableFill[k][j] = false;\n    }\n    newTableFill[i][j] = true;\n    this.updateValidKey(countSelections(newTableFill) >= (this.state.key.length - 1))\n    this.setState({\n      tableFill:newTableFill,\n    });\n  }\n\n  /* ---------------- Home Page --------------- */\n  \n  handleBreak() {\n    this.updateHome(!this.state.home);\n    this.updatePeriod(MIN_KEY_LEN);\n    this.updateValidKey(false);\n\n  }\n\n  handleMessageEdit( event ) {\n    this.updateMessage(event.target.value);\n  }\n\n  handleKeyEdit( event ) {\n    this.updateKey(event.target.value);\n  }\n\n  handleEncrypt() {\n    if(!this.state.key) {\n      return;\n    }\n    if(invalidKey(this.state.key)){\n      alert('ERROR: You have entered an invalid key. A valid key is between 2 and 9 numbers long, and contains each of ' +\n      'the numbers [1, length] exactly once.');\n      return;\n    }\n    this.updateMessage(encrypt(this.state.message, this.state.key));\n  }\n\n  handleDecrypt() {\n    if(!this.state.key) {\n      return;\n    }\n    if(invalidKey(this.state.key)){\n      alert('ERROR: You have entered an invalid key. A valid key is between 2 and 9 numbers long, and contains each of ' +\n      'the numbers [1, length] exactly once.');\n      return;\n    }\n    this.updateMessage(decrypt(this.state.message, this.state.key));\n  }\n\n  handleRandomPT() {\n    let newMessage = RANDOM_PLAINTEXT[Math.floor(Math.random() * RANDOM_PLAINTEXT.length)];\n    while( newMessage === this.state.message ) {\n      newMessage = RANDOM_PLAINTEXT[Math.floor(Math.random() * RANDOM_PLAINTEXT.length)];\n    }\n    this.updateMessage(newMessage);\n    this.updateKey('');\n  }\n\n  handleRandomCT() {\n    let newMessage = RANDOM_PLAINTEXT[Math.floor(Math.random() * RANDOM_PLAINTEXT.length)];\n    while( newMessage === this.state.message ) {\n      newMessage = RANDOM_PLAINTEXT[Math.floor(Math.random() * RANDOM_PLAINTEXT.length)];\n    }\n    let key = ''\n    let nums = [];\n    let keyLen = Math.floor(Math.random() * (MAX_KEY_LEN - 1)) + 2;\n    for( let i = 1; i <= keyLen; i++) {\n      nums.push(i);\n    }\n    nums = shuffle(nums);\n    for( let i = 0; i < keyLen; i++) {\n      key += '' + nums[i];\n    }\n    newMessage = encrypt(newMessage, key)\n    this.updateMessage(newMessage);\n    this.updateKey('');\n  }\n\n  /* ---------------- Break Page -------------- */\n\n  handleToHome() {\n    if(this.state.validKey) {\n        let newKey = getKeyFromGraph(this.state.tableFill);\n        newKey = invertKey(newKey);\n        this.updateKey(newKey);\n        this.updateMessage(decrypt(this.state.message, newKey));\n    } else {\n        this.updateKey('');\n    }\n    this.updateHome(!this.state.home);\n  }\n\n  handleClickTable(i, j) {\n    //deselect an item\n    if(this.state.tableFill[i][j]) {\n      this.updateTableSelection(i, j, false);\n      return;\n    }\n    let newGraph = Array(this.state.tableFill.length);\n    for(let  k = 0; k < newGraph.length; k++) {\n      newGraph[k] = [...this.state.tableFill[k]];\n    }\n    for(let k = 0; k < newGraph.length; k++) {\n      newGraph[i][k] = false;\n      newGraph[k][j] = false;\n    }\n    newGraph[i][j] = true;\n    if(containsCycle(newGraph)){\n      return;\n    }\n    this.updateTableSelectionTrue(i,j);\n  }\n\n  handlePeriodPlus() {\n    this.updatePeriod(this.state.period + 1);\n  }\n\n  handlePeriodMinus() {\n    this.updatePeriod(this.state.period - 1);\n  }\n\n  /* ------------------ App ------------------- */\n\n  renderPage() {\n    if(this.state.home) {\n      return(\n          <Box width='large' alignSelf='center'>\n            <HomeGrid\n              handleBreak={() => this.handleBreak()}\n              handleMessageEdit={event => this.handleMessageEdit(event)}\n              displayMessage={this.state.displayMessage}\n              handleEncrypt={() => this.handleEncrypt()}\n              handleDecrypt={() => this.handleDecrypt()}\n              handleKeyEdit={event => this.handleKeyEdit(event)}\n              displayKey={this.state.displayKey}\n              handleRandomPT={() => this.handleRandomPT()}\n              handleRandomCT={() => this.handleRandomCT()}\n            >\n            </HomeGrid>\n          </Box>\n      );\n    } else {\n        return(\n          <Box width='large' alignSelf='center'>\n            <BreakGrid\n              data={this.state.data}\n              handleClickTable={(i,j)=>this.handleClickTable(i,j)}\n              tableFill={this.state.tableFill}\n              handlePeriodPlus={() => this.handlePeriodPlus()}\n              handlePeriodMinus={() => this.handlePeriodMinus()}\n              validKey={this.state.validKey}\n              handleBack={() => this.handleToHome()}\n            > \n            </BreakGrid>\n          </Box>\n        );\n    }\n  }\n\n  render () {\n    return (\n      <Grommet theme={theme} full>\n        <Main>\n          {this.renderPage()}\n        </Main>\n      </Grommet>\n    );\n  }\n}\n\nfunction getKeyFromGraph(graph) {\n  let start = -1;\n  for(let j = 0; j < graph.length; j++) {\n    let colEmpty = true;\n    for(let i = 0; i < graph.length; i++) {\n      if(graph[i][j]) {\n        colEmpty = false;\n        break;\n      }\n    }\n    if(colEmpty) {\n      start = j;\n      break;\n    }\n  }\n\n  let key = '';\n  let stack = [];\n  stack.push(start);\n  while(stack.length > 0) {\n    let front = stack.pop();\n    key += (front + 1);\n    for(let j = 0; j < graph.length; j++) {\n      if(graph[front][j]) {\n        stack.push(j);\n      }\n    }\n  }\n\n  return key;\n}\n\n/**\n * counts the number of trues in a 2d boolean array\n * @param {Boolean[][]} arr 2d Boolean array \n */\nfunction countSelections(arr) {\n  let count = 0;\n  for(let i = 0; i < arr.length; i++) {\n    for(let j = 0; j < arr[i].length; j++) {\n      if(arr[i][j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\n/**\n * Inverts the given key\n * @param {String} key \n */\nfunction invertKey(key) {\n  let newKey = ''\n  for(let i = 1; i <= key.length; i++) {\n    newKey += i;\n  }\n  newKey = decrypt(newKey, key);\n  return newKey;\n}\n\n/**\n * Returns true if a graph contains a cycle, false otherwise\n * @param {Array} graph 2d boolean array that represents a directed graph \n */\nfunction containsCycle(graph) {\n  let visited = Array(graph.length).fill(false);\n  let frontier = Array();\n  while( visited.includes(false) ) {\n    for(let i = 0; i < visited.length; i++) {\n      if(!visited[i]) {\n        frontier.push(i);\n        break;\n      }\n    }\n    let recentlyVisited = Array(graph.length).fill(false);\n    while(frontier.length > 0) {\n      const front = frontier.pop();\n      visited[front] = true;\n      recentlyVisited[front] = true;\n      for( let i = 0; i < visited.length; i++){\n        if(graph[front][i]){\n          if(recentlyVisited[i]) {\n            return true;\n          }\n          frontier.push(i);\n        }\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Fills a period x period table with false\n * @param {Integer} period \n */\nfunction emptyTableFill(period) {\n  let output = Array(period);\n  for(let i = 0; i < period; i++) {\n    output[i] = Array(period).fill(false);\n  }\n  return output;\n}\n\n/**\n * Calculates the table data with the given period and message\n * @param {Integer} period \n * @param {String} message \n */\nfunction calculateTable(period, message) {\n  let output = Array(period);\n  for(let i = 0; i < period; i++) {\n    output[i] = Array(period).fill(0);\n  }\n  \n  let cols = Array(period);\n  for(let i = 0; i < period; i++) {\n    cols[i] = [];\n  }\n  for(let i = 0; i < Math.floor(message.length/period) * period; i++) {\n    cols[i%period].push(message.charAt(i));\n  }\n\n  for(let i = 0; i < period; i++) {\n    for(let j = 0; j < period; j++) {\n      if(i === j) {\n        continue;\n      }\n      let bigrams = new Map();\n      let total = 0;\n      for(let idx = 0; idx < cols[i].length; idx++) {\n        let bigram = cols[i][idx] + cols[j][idx];\n        total = total + 1;\n        if(bigrams.has(bigram)) {\n            bigrams.set(bigram, bigrams.get(bigram) + 1);\n        } else {\n            bigrams.set(bigram, 1);\n        }\n      }\n      //let bigramStat = Math.log(total + 1);\n      let bigramStat = 0;\n      for(const [key, value] of bigrams) {\n        //let actProb = value / (1.0 * total);\n        let actProb = value;\n        let engProb = ENGLISH_BIGRAMS[key.charCodeAt(0)- A_CODE][key.charCodeAt(1) - A_CODE] / (ENGLISH_BIGRAMS_TOTAL);\n        bigramStat += engProb * Math.log10(actProb + 1);\n      }\n\n      output[i][j] = Math.floor(bigramStat);\n    }\n  }\n\n  return output;\n}\n\n/**\n * Looks for incorrect keys\n * @param {String} key \n */\nfunction invalidKey(key) {\n  if(key.length > MAX_KEY_LEN) {\n    return true;\n  }\n  let vals = Array(MAX_KEY_LEN);\n  for( let i = 0; i < key.length; i++) {\n    vals[parseInt(key.charAt(i))-1] = true; \n  }\n  for( let i = 0; i < key.length; i++) {\n    if(!vals[i]) { \n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * decrypts the message with the key\n * @param {String} message the message to be encrypted\n * @param {String} key must be only numbers from 1 to 9, each number only used once \n */\nfunction decrypt(message, key) {\n  const period = key.length;\n  let array = Array(period);\n  for(let i = 0; i < period; i++) {\n    array[i] = [];\n  }\n  for(let i = 0; i < message.length; i++) {\n    array[i%period].push(message.charAt(i));\n  }\n  let encryptArray = Array(period);\n  for(let i = 0; i < key.length; i++) {\n    encryptArray[parseInt(key.charAt(i)) - 1] = array[i];\n  }\n  let output = '';\n  for(let i = 0; i < message.length + period; i++) {\n    let char = '';\n    if(char = encryptArray[i%period].shift()  ) {\n      output += char;\n    }\n  }\n  return output;\n}\n\n/**\n * encrypts the message with the key\n * @param {String} message the message to be encrypted\n * @param {String} key must be only numbers from 1 to 9, each number only used once \n */\nfunction encrypt(message, key) {\n  const period = key.length;\n  let array = Array(period);\n  for(let i = 0; i < period; i++) {\n    array[i] = [];\n  }\n  for(let i = 0; i < message.length; i++) {\n    array[i%period].push(message.charAt(i));\n  }\n  let encryptArray = [];\n  for(let i = 0; i < key.length; i++) {\n    encryptArray.push(array[parseInt(key.charAt(i)) - 1]);\n  }\n  let output = '';\n  for(let i = 0; i < message.length + period; i++) {\n    let char = '';\n    if(char = encryptArray[i%period].shift()  ) {\n      output += char;\n    }\n  }\n  return output;\n}\n\n\n/**\n * Converts message to upper case, removes all characters not in range [A,Z]\n * @param {String} message the string to be processed\n * @returns processed string\n */\nfunction processKey(message) {\n  let output = '';\n  for(let i = 0; i < message.length; i++) {\n    //concat char to the end of output\n    let char = message.charCodeAt(i);\n    if( ONE_CODE <= char && char <= NINE_CODE ) {\n      output += message.charAt(i);\n    }\n  }\n  return output;\n}\n\n/**\n * Converts message to upper case, removes all characters not in range [A,Z]\n * @param {String} message the string to be processed\n * @returns processed string\n */\nfunction processMessage(message) {\n  let output = '';\n  message = message.toUpperCase();\n  for(let i = 0; i < message.length; i++) {\n    //concat char to the end of output\n    let char = message.charCodeAt(i);\n    if( A_CODE <= char && char <= Z_CODE ) {\n      output += message.charAt(i);\n    }\n  }\n  return output;\n}\n\n/**\n * Returns the message broken into blocks of n chars, separated by a space\n * @param {String} message the string to be processed\n * @param {Integer} n the size of each block, must be greater than 0\n * @returns message broken into n-grams\n */\nfunction toNGram(message, n) {\n  let output = '';\n  for(let i = 0; i < message.length; i++) {\n    output += message.charAt(i);\n    //if i is at the end of a n-gram, add a space\n    if( (i % n) === (n - 1) ) {\n      output += SPACE;\n    }\n  }\n  return output;\n}\n\n/**\n * Credit to: https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n * Shuffles array in place. ES6 version\n * @param {Array} a items An array containing the items.\n */\nfunction shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}